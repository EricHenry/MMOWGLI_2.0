package com.example.mmowgli_explore;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Link;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.VerticalLayout;

public class CardView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardLinks;

	@AutoGenerated
	private NativeButton nativeButton_addCard;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardText;

	@AutoGenerated
	private NativeButton nativeButton_text;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardInfo;

	@AutoGenerated
	private NativeButton button_favorite;

	@AutoGenerated
	private VerticalLayout verticalLayout_votes;

	@AutoGenerated
	private NativeButton button_downvote;

	@AutoGenerated
	private NativeButton button_upvote;

	@AutoGenerated
	private Label label_voteCount;

	@AutoGenerated
	private Label label_date;

	@AutoGenerated
	private Link link_user;

	@AutoGenerated
	private Label label_cardType;

	private String cardId;
	private boolean isMini = true;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CardView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		//set topbar label & link styling
		label_cardType.setStyleName("center");
		link_user.setStyleName("center");
		label_date.setStyleName("center");
		label_voteCount.setStyleName("center");
		
		
		//card upvote / downvote
		button_upvote.setCaption(null);
		button_upvote.setIcon(new ThemeResource("images/icons/cards/upArrrow.png"));
		button_upvote.setStyleName("cardButtons");
		
		button_downvote.setCaption(null);
		button_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow.png"));
		button_downvote.setStyleName("cardButtons");
		
		//card favorite
		button_favorite.setCaption(null);
		button_favorite.setIcon(new ThemeResource("images/icons/cards/star.png"));
		button_favorite.setStyleName("cardTextMini");
		
		//card text
		nativeButton_text.setCaption("Lorem ipsum dolor sit amet, consectetur adipiscing elit Cras sodales eros ut ipsum ultricies eleifend. Vivamus justo ipsum, rutrum vel orciv"); //140 characters
		
		//add card
		nativeButton_addCard.setCaption(null);
		nativeButton_addCard.setIcon(new ThemeResource("images/icons/cards/plus.png"));
		
		horizontalLayout_cardText.setStyleName("cardText");
		horizontalLayout_cardLinks.setStyleName("cardBottom");
		
		setMiniCard();
	}
	
	/**
	 * Construct a card object with its unique identifier
	 * 
	 * @param id -> unique identifier of the card
	 */
	public CardView(String id) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		//set the unique identifier of this card.
		this.cardId = id;
		
		//set topbar label & link styling
		label_cardType.setStyleName("center");
		link_user.setStyleName("center");
		label_date.setStyleName("center");
		label_voteCount.setStyleName("center");
		
		
		//card upvote / downvote
		button_upvote.setCaption(null);
		button_upvote.setIcon(new ThemeResource("images/icons/cards/upArrrow.png"));
		button_upvote.setStyleName("cardButtons");
		
		button_downvote.setCaption(null);
		button_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow.png"));
		button_downvote.setStyleName("cardButtons");
		
		//vote number styling
		//label_voteCount.setStyleName("cardVotes");
		
		//card favorite
		button_favorite.setCaption(null);
		button_favorite.setIcon(new ThemeResource("images/icons/cards/star.png"));
		button_favorite.setStyleName("cardTextMini");
		
		//card text
		nativeButton_text.setCaption("Lorem ipsum dolor sit amet, consectetur adipiscing elit Cras sodales eros ut ipsum ultricies eleifend. Vivamus justo ipsum, rutrum vel orciv"); //140 characters
		
		//add card
		nativeButton_addCard.setCaption(null);
		nativeButton_addCard.setIcon(new ThemeResource("images/icons/cards/plus.png"));
		
		horizontalLayout_cardText.setStyleName("cardText");
		horizontalLayout_cardLinks.setStyleName("cardBottom");
		
		setMiniCard();
	}
	
	/**
	 * Copy Constructor
	 */
	public CardView(CardView copy){
		this.cardId = copy.getCardId();
		this.button_downvote = copy.getButton_downvote();
		this.button_favorite = copy.getButton_favorite();
		this.button_upvote = copy.getButton_upvote();
		this.horizontalLayout_cardInfo = copy.getHorizontalLayout_cardInfo();
		this.horizontalLayout_cardLinks = copy.getHorizontalLayout_cardLinks();
		this.horizontalLayout_cardText = copy.getHorizontalLayout_cardText();
		this.isMini = copy.isMini();
		this.label_cardType = copy.getLabel_cardType();
		this.label_date = copy.getLabel_date();
		this.label_voteCount = copy.getLabel_voteCount();
		this.link_user = copy.getLink_user();
		this.mainLayout = copy.getMainLayout();
		this.nativeButton_addCard = copy.getNativeButton_addCard();
		this.nativeButton_text = copy.getNativeButton_text();
		this.verticalLayout_votes = copy.getVerticalLayout_votes();
	}
	
	/**
	 * Sets a card's background of the top bar
	 * @param cardType - specifies which of the four types a card should be
	 */
	public void setCardColor(String cardType){
		
		horizontalLayout_cardInfo.setStyleName("cardType" + cardType);
		
	}
	
	/**
	 * Sets the card type, This changes the card's label to reflect the type.
	 * 	e.g. cardType = Adapt -> will change the label of the card to reflect the type.
	 * 
	 * TODO -> have this method call SetCardColor to automatically change the styling when the type is set.
	 * 
	 * @param cardType -> Specifies what type of card
	 */
	public void setCardType(String cardType){
		
		label_cardType.setValue(cardType);
		setCardColor(cardType);
		
	}
	
	/**
	 * Set the styling of the card to a mini view
	 */
	public void setMiniCard(){
		//cardView_1.getNativeButton_text().setCaption("POOP");
		nativeButton_text.setStyleName("cardTextMini");
		nativeButton_addCard.setStyleName("cardTextMini");
		
		horizontalLayout_cardText.setHeight("-1");
		mainLayout.setExpandRatio(horizontalLayout_cardLinks, 1.0f);
		mainLayout.setHeight("100px");
		isMini = true;
	}
	
	/**
	 * Set the styling of the card to the full view
	 */
	public void setFullCard(){
		nativeButton_text.setStyleName("cardButtons");
		nativeButton_addCard.setStyleName("cardButtons");
		
		horizontalLayout_cardText.setHeight("100%");
		mainLayout.setExpandRatio(horizontalLayout_cardLinks, 0.1f);
		mainLayout.setHeight("200px");
		isMini = false;
	}
	
	/**
	 * 
	 * @param card
	 * @return
	 */
	public boolean equals(CardView card){
		
		//catch of the current card is null
		try{
			if(this.cardId != card.getCardId())
				return false;
			else 
				return true;
		}catch(Exception e){
			return false;
		}
		
	}

	//Getters and Setters
	public boolean isMini() {
		return isMini;
	}

	public void setMini(boolean isMini) {
		this.isMini = isMini;
	}
	
	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}
	
	public HorizontalLayout getHorizontalLayout_cardLinks() {
		return horizontalLayout_cardLinks;
	}

	public void setHorizontalLayout_cardLinks(
			HorizontalLayout horizontalLayout_cardLinks) {
		this.horizontalLayout_cardLinks = horizontalLayout_cardLinks;
	}

	public NativeButton getNativeButton_addCard() {
		return nativeButton_addCard;
	}

	public void setNativeButton_addCard(NativeButton nativeButton_addCard) {
		this.nativeButton_addCard = nativeButton_addCard;
	}

	public HorizontalLayout getHorizontalLayout_cardText() {
		return horizontalLayout_cardText;
	}

	public void setHorizontalLayout_cardText(
			HorizontalLayout horizontalLayout_cardText) {
		this.horizontalLayout_cardText = horizontalLayout_cardText;
	}

	public NativeButton getNativeButton_text() {
		return nativeButton_text;
	}

	public void setNativeButton_text(NativeButton nativeButton_text) {
		this.nativeButton_text = nativeButton_text;
	}

	public HorizontalLayout getHorizontalLayout_cardInfo() {
		return horizontalLayout_cardInfo;
	}

	public void setHorizontalLayout_cardInfo(
			HorizontalLayout horizontalLayout_cardInfo) {
		this.horizontalLayout_cardInfo = horizontalLayout_cardInfo;
	}

	public NativeButton getButton_favorite() {
		return button_favorite;
	}

	public void setButton_favorite(NativeButton button_favorite) {
		this.button_favorite = button_favorite;
	}

	public NativeButton getButton_downvote() {
		return button_downvote;
	}

	public void setButton_downvote(NativeButton button_downvote) {
		this.button_downvote = button_downvote;
	}

	public NativeButton getButton_upvote() {
		return button_upvote;
	}

	public void setButton_upvote(NativeButton button_upvote) {
		this.button_upvote = button_upvote;
	}

	public Label getLabel_voteCount() {
		return label_voteCount;
	}

	public void setLabel_voteCount(Label label_voteCount) {
		this.label_voteCount = label_voteCount;
	}

	public Label getLabel_date() {
		return label_date;
	}

	public void setLabel_date(Label label_date) {
		this.label_date = label_date;
	}

	public Link getLink_user() {
		return link_user;
	}

	public void setLink_user(Link link_user) {
		this.link_user = link_user;
	}

	public Label getLabel_cardType() {
		return label_cardType;
	}

	public void setLabel_cardType(Label label_cardType) {
		this.label_cardType = label_cardType;
	}

	public String getCardId() {
		return cardId;
	}

	public void setCardId(String cardId) {
		this.cardId = cardId;
	}
	
	public VerticalLayout getVerticalLayout_votes() {
		return verticalLayout_votes;
	}

	public void setVerticalLayout_votes(VerticalLayout verticalLayout_votes) {
		this.verticalLayout_votes = verticalLayout_votes;
	}	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("340px");
		mainLayout.setHeight("200px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("340px");
		setHeight("200px");
		
		// horizontalLayout_cardInfo
		horizontalLayout_cardInfo = buildHorizontalLayout_cardInfo();
		mainLayout.addComponent(horizontalLayout_cardInfo);
		mainLayout.setComponentAlignment(horizontalLayout_cardInfo,
				new Alignment(24));
		
		// horizontalLayout_cardText
		horizontalLayout_cardText = buildHorizontalLayout_cardText();
		mainLayout.addComponent(horizontalLayout_cardText);
		mainLayout.setExpandRatio(horizontalLayout_cardText, 1.0f);
		
		// horizontalLayout_cardLinks
		horizontalLayout_cardLinks = buildHorizontalLayout_cardLinks();
		mainLayout.addComponent(horizontalLayout_cardLinks);
		mainLayout.setExpandRatio(horizontalLayout_cardLinks, 0.1f);
		mainLayout.setComponentAlignment(horizontalLayout_cardLinks,
				new Alignment(24));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardInfo() {
		// common part: create layout
		horizontalLayout_cardInfo = new HorizontalLayout();
		horizontalLayout_cardInfo.setImmediate(false);
		horizontalLayout_cardInfo.setWidth("-1px");
		horizontalLayout_cardInfo.setHeight("-1px");
		horizontalLayout_cardInfo.setMargin(false);
		horizontalLayout_cardInfo.setSpacing(true);
		
		// label_cardType
		label_cardType = new Label();
		label_cardType.setImmediate(false);
		label_cardType.setWidth("100.0%");
		label_cardType.setHeight("35px");
		label_cardType.setValue("Expand");
		horizontalLayout_cardInfo.addComponent(label_cardType);
		horizontalLayout_cardInfo.setComponentAlignment(label_cardType,
				new Alignment(9));
		
		// link_user
		link_user = new Link();
		link_user.setCaption("User 2000");
		link_user.setImmediate(false);
		link_user.setWidth("100.0%");
		link_user.setHeight("35px");
		horizontalLayout_cardInfo.addComponent(link_user);
		horizontalLayout_cardInfo.setComponentAlignment(link_user,
				new Alignment(9));
		
		// label_date
		label_date = new Label();
		label_date.setImmediate(false);
		label_date.setWidth("100.0%");
		label_date.setHeight("35px");
		label_date.setValue("5/01/15");
		horizontalLayout_cardInfo.addComponent(label_date);
		horizontalLayout_cardInfo.setComponentAlignment(label_date,
				new Alignment(9));
		
		// label_voteCount
		label_voteCount = new Label();
		label_voteCount.setImmediate(false);
		label_voteCount.setWidth("100.0%");
		label_voteCount.setHeight("35px");
		label_voteCount.setValue("25");
		horizontalLayout_cardInfo.addComponent(label_voteCount);
		horizontalLayout_cardInfo.setComponentAlignment(label_voteCount,
				new Alignment(9));
		
		// verticalLayout_votes
		verticalLayout_votes = buildVerticalLayout_votes();
		horizontalLayout_cardInfo.addComponent(verticalLayout_votes);
		
		// button_favorite
		button_favorite = new NativeButton();
		button_favorite.setCaption("NativeButton");
		button_favorite.setImmediate(true);
		button_favorite.setWidth("100.0%");
		button_favorite.setHeight("35px");
		horizontalLayout_cardInfo.addComponent(button_favorite);
		
		return horizontalLayout_cardInfo;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_votes() {
		// common part: create layout
		verticalLayout_votes = new VerticalLayout();
		verticalLayout_votes.setImmediate(false);
		verticalLayout_votes.setWidth("-1px");
		verticalLayout_votes.setHeight("-1px");
		verticalLayout_votes.setMargin(false);
		
		// button_upvote
		button_upvote = new NativeButton();
		button_upvote.setCaption("NativeButton");
		button_upvote.setImmediate(true);
		button_upvote.setWidth("20px");
		button_upvote.setHeight("15px");
		verticalLayout_votes.addComponent(button_upvote);
		
		// button_downvote
		button_downvote = new NativeButton();
		button_downvote.setCaption("NativeButton");
		button_downvote.setImmediate(true);
		button_downvote.setWidth("20px");
		button_downvote.setHeight("15px");
		verticalLayout_votes.addComponent(button_downvote);
		
		return verticalLayout_votes;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardText() {
		// common part: create layout
		horizontalLayout_cardText = new HorizontalLayout();
		horizontalLayout_cardText.setImmediate(false);
		horizontalLayout_cardText.setWidth("100.0%");
		horizontalLayout_cardText.setHeight("100.0%");
		horizontalLayout_cardText.setMargin(false);
		
		// nativeButton_text
		nativeButton_text = new NativeButton();
		nativeButton_text.setCaption("NativeButton");
		nativeButton_text.setImmediate(true);
		nativeButton_text.setWidth("100.0%");
		nativeButton_text.setHeight("100.0%");
		horizontalLayout_cardText.addComponent(nativeButton_text);
		
		return horizontalLayout_cardText;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardLinks() {
		// common part: create layout
		horizontalLayout_cardLinks = new HorizontalLayout();
		horizontalLayout_cardLinks.setImmediate(false);
		horizontalLayout_cardLinks.setWidth("100.0%");
		horizontalLayout_cardLinks.setHeight("-1px");
		horizontalLayout_cardLinks.setMargin(false);
		
		// nativeButton_addCard
		nativeButton_addCard = new NativeButton();
		nativeButton_addCard.setCaption("NativeButton");
		nativeButton_addCard.setImmediate(true);
		nativeButton_addCard.setWidth("-1px");
		nativeButton_addCard.setHeight("-1px");
		horizontalLayout_cardLinks.addComponent(nativeButton_addCard);
		horizontalLayout_cardLinks.setComponentAlignment(nativeButton_addCard,
				new Alignment(10));
		
		return horizontalLayout_cardLinks;
	}

}
