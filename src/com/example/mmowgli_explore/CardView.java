/**
 * @Author: Eric H Correia
 *
 * This class creates a component to show a user's card and relative information.
 * 	The CardView Objects allow for the ability to create cards, upvote, downvote,
 * 	favorite cards, and find common tags.
 * 
 */

package com.example.mmowgli_explore;

import java.sql.SQLException;
import java.sql.Timestamp;

import com.example.mmowgli_backend.Card;
import com.example.mmowgli_backend.MmowgliDB;
import com.example.mmowgli_backend.TagList;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Link;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PopupView;
import com.vaadin.ui.VerticalLayout;


public class CardView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardLinks;
	@AutoGenerated
	private NativeButton nativeButton_addCard;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_tags;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardText;
	@AutoGenerated
	private NativeButton nativeButton_text;
	@AutoGenerated
	private GridLayout gridLayout_cardInfo;
	@AutoGenerated
	private NativeButton nativeButton_favorite;
	@AutoGenerated
	private VerticalLayout voteContainer;
	@AutoGenerated
	private NativeButton nativeButton_downvote;
	@AutoGenerated
	private NativeButton nativeButton_upvote;
	@AutoGenerated
	private Label voteCount;
	@AutoGenerated
	private Label date;
	@AutoGenerated
	private Link user;
	@AutoGenerated
	private Label cardType;
	//Attributes
	private String cardId;
	private String parent;
	private String playerId;
	private boolean importedTags			= false;
	//private boolean isMini 					= true;
	private boolean isFavorite 				= false;
	private boolean upvoted 				= false;
	private boolean downvoted 				= false;
	private int votes = 0;
	
	//PopupView pop;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CardView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	/**
	 * Constructor with specified card data.
	 * 
	 * @param id			-> The unique card ID
	 * @param playerId		-> The unique player who created this card
	 * @param cardText		-> Text written by the player
	 * @param cardType		-> The one of 6 card types the card can be 
	 * @param parent		-> The ID of this card's parent
	 * @param vote			-> The number of votes that the card has acquired
	 * @param date			-> When the card was created
	 */
	public CardView(String id, String playerId, String cardText, String cardType, String parent, String vote, String date) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		//set the values form the parameters.
		this.cardId = id;
		this.user.setCaption("User"+playerId);
		this.playerId = playerId;
		this.nativeButton_text.setCaption(cardText);
		setCardType(cardType);
		this.parent = parent;
		this.voteCount.setValue(vote);
		this.date.setValue(date);
		
		//set the vote count
		this.votes = Integer.parseInt(vote);
		
		//set different styling if it is an idea card
		if(cardType.equalsIgnoreCase("Idea1") || cardType.equalsIgnoreCase("Idea2"))
			initIdeaCardStyling();
		else
			initCardStyling();
		
		shrinkCardView();
		
		//POPUP stlying
		initPopupStyling();
	}
		
	/**
	 * This method sets the basic card styling for a CardView Object
	 */
	private void initCardStyling(){
		//set topbar label & link styling
		cardType.setStyleName("center");
		user.setStyleName("center");
		date.setStyleName("center");
		voteCount.setStyleName("center");
				
				
		//card upvote / downvote
		nativeButton_upvote.setCaption(null);
		nativeButton_upvote.setIcon(new ThemeResource("images/icons/cards/upArrow.png"));
		nativeButton_upvote.setStyleName("cardButtons");
				
		nativeButton_downvote.setCaption(null);
		nativeButton_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow.png"));
		nativeButton_downvote.setStyleName("cardButtons");
				
		//vote number styling
		voteCount.setStyleName("cardVotes");
				
		//card favorite
		nativeButton_favorite.setCaption(null);
		nativeButton_favorite.setIcon(new ThemeResource("images/icons/cards/star.png"));
		nativeButton_favorite.setStyleName("cardTextMini");
		
		//add card
		nativeButton_addCard.setCaption(null);
		nativeButton_addCard.setIcon(new ThemeResource("images/icons/cards/plus.png"));
				
		horizontalLayout_cardText.setStyleName("cardText");
		horizontalLayout_cardLinks.setStyleName("cardBottom");
		
		//update the card style with the card's data
		initCardFavoriteStyle();
		initCardVotesStyle();
		
		//set card button listeners
		setFavoriteButtonListener();
		setUpVoteButtonListener();
		setDownVoteButtonListener();
	}

	/**
	 * This method specifically sets the styling for a CardView Object that is an idea card
	 */
	private void initIdeaCardStyling(){
		
		//remove superflusous data from card
		gridLayout_cardInfo.removeComponent(user);
		gridLayout_cardInfo.removeComponent(date);
		gridLayout_cardInfo.removeComponent(voteCount);
		gridLayout_cardInfo.removeComponent(voteContainer);
		gridLayout_cardInfo.removeComponent(nativeButton_favorite);
		gridLayout_cardInfo.setRows(1);
		gridLayout_cardInfo.setColumns(1);
		gridLayout_cardInfo.setComponentAlignment(cardType, Alignment.MIDDLE_CENTER);
		
		cardType.setStyleName("topIdeaCard");
		
		//add card
		nativeButton_addCard.setCaption(null);
		nativeButton_addCard.setIcon(new ThemeResource("images/icons/cards/plus.png"));
				
		horizontalLayout_cardText.setStyleName("cardText");
		horizontalLayout_cardLinks.setStyleName("cardBottom");
		

	}
	
	/**
	 * Sets a card's background of the top bar
	 * @param cardType - specifies which of the four types a card should be
	 */
	public void setCardColor(String cardType){
		
		gridLayout_cardInfo.setStyleName("cardType" + cardType);	
	}
	
	/**
	 * Sets the card type, This changes the card's label to reflect the type.
	 * 	e.g. cardType = Adapt -> will change the label of the card to reflect the type.
	 * 
	 * @param cardType -> Specifies what type of card
	 */
	public void setCardType(String newCardType){
		
		this.cardType.setValue(newCardType);
		setCardColor(newCardType);
		
	}
	
	/**
	 * Set the styling of the card to a shrunken view
	 */
	public void shrinkCardView(){
		//cardView_1.getNativeButton_text().setCaption("POOP");
		nativeButton_text.setStyleName("cardTextMini");
		nativeButton_addCard.setStyleName("cardTextMini");
		
		horizontalLayout_tags.setVisible(false);
		
		horizontalLayout_cardText.setHeight("-1");
		mainLayout.setExpandRatio(horizontalLayout_cardLinks, 1.0f);
		mainLayout.setHeight("120px");
		//isMini = true;
	}
	
	/**
	 * Set the styling of the card to the full view
	 */
	public void expandCardView(){
		nativeButton_text.setStyleName("cardButtons");
		nativeButton_addCard.setStyleName("cardButtons");
		
		showTags();
		
		horizontalLayout_cardText.setHeight("100%");
		mainLayout.setExpandRatio(horizontalLayout_cardLinks, 0.13f);
		mainLayout.setHeight("200px");
		//isMini = false;
	}
	
	/**
	 * This method shows the tags for an active card
	 */
	private void showTags(){
		horizontalLayout_tags.setVisible(true);
		
		TagList tags;
		
		//System.out.println("INSIDE SHOW TAGS");
		
		if(!importedTags){
			
			//get the tag list from the DB
			try {
				tags = MmowgliDB.oneCardTagsQuery(Integer.parseInt(cardId));
			
				//Check if the card has tags.
				if (tags != null && tags.size() != 0){
					//show tags
					while(!tags.isEmpty()){
						//System.out.println("\t TRYING TO MAKE LABELS");
						Link tag = new Link();
						tag.setCaption("#" + tags.getTag());
						tag.setStyleName("link");
						horizontalLayout_tags.addComponent(tag);
					}
				}
			
			} catch (NumberFormatException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
			importedTags = true;
		}
		
	}
	
	/**
	 * Add opacity to the card, making the card appear more transparent / faded
	 */
	public void addTransparency(){
		mainLayout.setStyleName("transparent");
	}
	
	/**
	 * Remove the card's opacity. This takes away the faded effect of the card.
	 */
	public void removeTransparency(){
		mainLayout.removeStyleName("transparent");
	}
	
	/**
	 * This method shows a specific card creator component 
	 * 	depending on what card it is being created from
	 */
	private void initPopupStyling(){
		//Popup stuff
				PopupView pop;
				
				if(cardType.getValue().equalsIgnoreCase("Idea1")){
					RootCardCreator creatorRoot = new RootCardCreator();
					creatorRoot.getTabSheet().removeTab(creatorRoot.getTabSheet().getTab(creatorRoot.getVerticalLayout_Root2()));
					pop = new PopupView(new PopupView.Content(){

						@Override
						public String getMinimizedValueAsHTML() {
							// TODO Auto-generated method stub
							return null;
						}

						@Override
						public Component getPopupComponent() {
							// TODO Auto-generated method stub
							return creatorRoot;
						}
						
					});
					
					//set the listener 
					
					setSubmitNewRootCardButtonListener(creatorRoot, this.cardId);
					
				} else if(cardType.getValue().equalsIgnoreCase("Idea2")){
					RootCardCreator creatorRoot = new RootCardCreator();
					creatorRoot.getTabSheet().removeTab(creatorRoot.getTabSheet().getTab(creatorRoot.getVerticalLayout_Root1()));
					creatorRoot.getTabSheet().getTab(creatorRoot.getVerticalLayout_Root2()).setStyleName("Root2Main");
					
					pop = new PopupView(new PopupView.Content(){

						@Override
						public String getMinimizedValueAsHTML() {
							// TODO Auto-generated method stub
							return null;
						}

						@Override
						public Component getPopupComponent() {
							// TODO Auto-generated method stub
							return creatorRoot;
						}
						
					});
					
					//set the listener 
					
					setSubmitNewRootCardButtonListener(creatorRoot, this.cardId);
				
				}else{
				
						CardCreator creator = new CardCreator();
				
						pop = new PopupView(new PopupView.Content(){

							@Override
							public String getMinimizedValueAsHTML() {
								// TODO Auto-generated method stub
								return null;
							}

							@Override
							public Component getPopupComponent() {
								// TODO Auto-generated method stub
								return creator;
							}
					
						});
						
						//setListener
						setSubmitNewCardButtonListener(creator, this.cardId);
				}
				
				mainLayout.addComponent(pop);
				setAddCardButtonListener(pop);
				//END POPUP
	}
 
	/**
	 * This method sets the appropriate icons for voting buttons
	 * 	when a card is first created.
	 */
	private void initCardVotesStyle(){
		//check if the card has been voted
		try {
			int voteStatus = MmowgliDB.checkVoteQuery(Integer.parseInt(playerId), Integer.parseInt(cardId));
			
			if(voteStatus == 1){
				upvoted = true;
				
				//set styling
				nativeButton_upvote.setIcon(new ThemeResource("images/icons/cards/upArrow_highlight.png"));
				
			}else if(voteStatus == -1){
				downvoted = true;
				
				//set styling
				nativeButton_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow_highlight.png"));
			}
			
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * This method sets the appropriate icon for the favorite button
	 * 	when a card is first created.
	 * 
	 * e.g. if a card is a favorite of the user it will show a highlighted star
	 */
	private void initCardFavoriteStyle(){
		//check if the card is a favorite
		try {
			isFavorite = MmowgliDB.checkFavoriteQuery(Integer.parseInt(cardId), Integer.parseInt(playerId));
			
			//setstyling if it is a favorite
			if(isFavorite){
				nativeButton_favorite.setIcon(new ThemeResource("images/icons/cards/starLit.png"));
			}
				
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Add Default Click Listener for the Add Card Button
	 */
	public void setAddCardButtonListener(PopupView popup){
		nativeButton_addCard.addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event){
				//TODO add a popup window to add a card.
				popup.setPopupVisible(true);
			}
			
		});
		
	}
	
	/**
	 * A Method to listen if the button to submit the new card info has been clicked.
	 * 
	 * @param creator	-> A new CardCreator Component of a specific card.
	 * @param id		-> ID of the card that is creating a new card
	 */
	private void setSubmitNewCardButtonListener(CardCreator creator, String id){
		creator.getNativeButton_submit().addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event){
				Card newCard = new Card();
				String newCardType = creator.getTabSheet().getSelectedTab().getCaption();
				String newCardText;
				
				//System.out.println(newCardTypeString);
				if (newCardType.equalsIgnoreCase("expand")){
					newCardText = creator.getTextArea_Expand().getValue();
					
					//clear the input
					creator.getTextArea_Expand().setValue("");
					//System.out.println(newCardText);
				} else if (newCardType.equalsIgnoreCase("explore")){
					newCardText = creator.getTextArea_Explore().getValue();
					//System.out.println(newCardText);
					//clear the input
					creator.getTextArea_Explore().setValue("");
					
				} else if (newCardType.equalsIgnoreCase("counter")){
					newCardText = creator.getTextArea_Counter().getValue();
					//System.out.println(newCardText);
					//clear the input
					creator.getTextArea_Counter().setValue("");
				} else {
					newCardText = creator.getTextArea_Adapt().getValue();
					
					//clear the input
					creator.getTextArea_Adapt().setValue("");
					//System.out.println(newCardText);
				}
				
				//if the card text is not null continue creating the card
				if(!newCardText.equalsIgnoreCase(null) && !newCardText.equalsIgnoreCase("\n") && !newCardText.equalsIgnoreCase("") && !newCardText.equalsIgnoreCase(" ")){
					//set an id
					try {
						newCard.cardId = MmowgliDB.lastCardQuery() + 1;
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
					//set the player id -> our test player's id is 0
					newCard.playerId = 0;
					
					//set the card's text
					newCard.textUser = newCardText;
					
					//set the type of card being created.
					newCard.cardType = newCardType;
					
					//set parent's id
					newCard.parent = Integer.parseInt(id);
					
					try {
						MmowgliDB.addCardQuery(newCard);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					String tagsList = creator.getTextArea_tag().getValue();
					
					//check to see if there are tags
					if(!tagsList.equalsIgnoreCase("") && !tagsList.equalsIgnoreCase(null) && !tagsList.equalsIgnoreCase("\n")){
						//split the string into idividual tags
						String tags[] = tagsList.split(" ");
						
						//get the time stamp
						java.util.Date now = new java.util.Date();
						Timestamp timeNow = new java.sql.Timestamp(now.getTime());
						
						TagList convertedTags = new TagList();
						
						for(String currentTag : tags){
							//System.out.println("TAG - " + currentTag);
							convertedTags.addTag(currentTag);
						}
						
						
						//put tag info in Database
						try {
							MmowgliDB.addTagsQuery(convertedTags, newCard.cardId, timeNow);
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						creator.getTextArea_tag().setValue("");
					}
					
				}else {
					//tell the user that the field is empty
				}

			}
		});
	}
	
	/**
	 * A Method to listen if the button to submit the ROOT card has been clicked.
	 * 
	 * @param creator	-> A new CardCreator Component of a specific card.
	 * @param id		-> ID of the card that is creating a new card
	 */
	private void setSubmitNewRootCardButtonListener(RootCardCreator creator, String id){
		creator.getNativeButton_submit().addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event){
				Card newCard = new Card();
				String newCardType = creator.getTabSheet().getSelectedTab().getCaption();
				String newCardText;
				
				//System.out.println(newCardTypeString);
				if (newCardType.equalsIgnoreCase("Root1")){
					newCardText = creator.getTextArea_Root1().getValue();
					
					//clear the input
					creator.getTextArea_Root1().setValue("");
					//System.out.println(newCardText);
				} else {
					newCardText = creator.getTextArea_Root2().getValue();
					//System.out.println(newCardText);
					//clear the input
					creator.getTextArea_Root2().setValue("");
				}
				
				//if the card text is not null continue creating the card
				if(!newCardText.equalsIgnoreCase(null) && !newCardText.equalsIgnoreCase("\n") && !newCardText.equalsIgnoreCase("") && !newCardText.equalsIgnoreCase(" ")){
					
					//set an id
					try {
						newCard.cardId = MmowgliDB.lastCardQuery() + 1;
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
					//set the player id -> our test player's id is 0
					newCard.playerId = 0;
					
					//set the card's text
					newCard.textUser = newCardText;
					
					//set the type of card being created.
					newCard.cardType = newCardType;
					
					//set parent's id
					newCard.parent = Integer.parseInt(id);
					
					try {
						MmowgliDB.addCardQuery(newCard);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					String tagsList = creator.getTextArea_tags().getValue();
					
					//check to see if there are tags
					if(!tagsList.equalsIgnoreCase("") && !tagsList.equalsIgnoreCase(null) && !tagsList.equalsIgnoreCase("\n")){
						//split the string into idividual tags
						String tags[] = tagsList.split(" ");
						
						//get the time stamp
						java.util.Date now = new java.util.Date();
						Timestamp timeNow = new java.sql.Timestamp(now.getTime());
						
						TagList convertedTags = new TagList();
						
						for(String currentTag : tags){
							//System.out.println("TAG - " + currentTag);
							convertedTags.addTag(currentTag);
						}
						
						//put tag info in Database
						try {
							MmowgliDB.addTagsQuery(convertedTags, newCard.cardId, timeNow);
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						creator.getTextArea_tags().setValue("");
					}
					
				}else {
					//tell the user that the field is empty
				}
					
			}
		});
		
	}

	/**
	 * Add Default Click Listener for the Favorite Button
	 */
	private void setFavoriteButtonListener(){
		nativeButton_favorite.addClickListener(new NativeButton.ClickListener(){

			@Override
			public void buttonClick(ClickEvent event) {
				
				//check if the card is already chosen as a favorite
				if(!isFavorite){
					//TODO update DB
					try {
						MmowgliDB.addFavoriteQuery(Integer.parseInt(cardId), Integer.parseInt(playerId));
						
					} catch (NumberFormatException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					//change the local variable to true
					isFavorite = true;
					
					//update Icon
					nativeButton_favorite.setIcon(new ThemeResource("images/icons/cards/starLit.png"));

				}else{
					//TODO update DB
					try {
						MmowgliDB.deleteFavorite(Integer.parseInt(cardId), Integer.parseInt(playerId));
					} catch (NumberFormatException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					//change the local variable to false
					isFavorite = false;
					
					//update Icon
					nativeButton_favorite.setIcon(new ThemeResource("images/icons/cards/star.png"));
					
				}
			}
		});
	}
	
	/**
	 * Add Default Click Listener for the Upvote Button
	 */
	private void setUpVoteButtonListener(){
		nativeButton_upvote.addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event){
				
				//check if it has not been upvoted yet by the user
				//If user has upvoted already remove the upvote 
				if(!upvoted){
					//TODO update the DB
					
					//Check the user has previously downvoted
					if(downvoted){
						//replace the downvote icon
						nativeButton_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow.png"));
						
						//add 2 points, one point to make it go back to the original value and the other for the upvote
						votes = votes +2;
						
						//set downvote to false
						downvoted = false;
						
						/*--- update the database ---*/
						try {
							MmowgliDB.addVoteQuery(Integer.parseInt(playerId), Integer.parseInt(cardId), 1);
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}else{
						//update local card vote value
						votes = votes + 1;
					}
					
					/*--- update the DB ---*/
					try {
						MmowgliDB.addVoteQuery(Integer.parseInt(playerId), Integer.parseInt(cardId), 1);
					} catch (NumberFormatException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					//tell card that user has upvoted it
					upvoted = true;
					
					//display new vote count
					voteCount.setValue(Integer.toString(votes));
					
					//change the icon 
					nativeButton_upvote.setIcon(new ThemeResource("images/icons/cards/upArrow_highlight.png"));
				}else{
					
					//subtract vote locally by 1
					votes = votes - 1;
					
					//display new value on the card
					voteCount.setValue(Integer.toString(votes));
					
					//update upvote to false
					upvoted = false;
					
					/*--- switch icons ---*/
					nativeButton_upvote.setIcon(new ThemeResource("images/icons/cards/upArrow.png"));
					
					/*---  update the database ---*/
					try {
						MmowgliDB.addVoteQuery(Integer.parseInt(playerId), Integer.parseInt(cardId), 0);
					} catch (NumberFormatException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
			}
			
		});
	}
	
	/**
	 * Add Default Click Listener for the Downvote Button
	 */
	private void setDownVoteButtonListener(){
		nativeButton_downvote.addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event){
				//check if it has not been upvoted yet by the user
				if(!downvoted){
					
					//Check the user has previously downvoted
					if(upvoted){
						//replace the downvote icon 
						nativeButton_upvote.setIcon(new ThemeResource("images/icons/cards/upArrow.png"));
						
						//add 2 points, one point to make it go back to the original value and the other for the upvote
						votes = votes - 2;
						
						//set downvote to false
						upvoted = false;
						
						/*--- update the database ---*/
						try {
							MmowgliDB.addVoteQuery(Integer.parseInt(playerId), Integer.parseInt(cardId), -1);
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}else{
						//update local card vote value
						votes = votes - 1;
					}
					
					/*--- update the DB ---*/
					try {
						MmowgliDB.addVoteQuery(Integer.parseInt(playerId), Integer.parseInt(cardId), -1);
					} catch (NumberFormatException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					//tell card that user has down voted it
					downvoted = true;
					
					//display new vote count
					voteCount.setValue(Integer.toString(votes));
					
					// change the icon 
					nativeButton_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow_highlight.png"));
					
				}else {
					
					//subtract vote locally by 1
					votes = votes + 1;
					
					//display new value on the card
					voteCount.setValue(Integer.toString(votes));
					
					//update downvote to false
					downvoted = false;
					
					//switch icons
					nativeButton_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow.png"));
					
					/*--- update the database ---*/
					try {
						MmowgliDB.addVoteQuery(Integer.parseInt(playerId), Integer.parseInt(cardId), 0);
					} catch (NumberFormatException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			
		});
	}
	
	public NativeButton getNativeButton_text() {
		return nativeButton_text;
	}

	public void setNativeButton_text(NativeButton nativeButton_text) {
		this.nativeButton_text = nativeButton_text;
	}

	public String getCardId() {
		return cardId;
	}

	public void setCardId(String cardId) {
		this.cardId = cardId;
	}

	public String getCardParent() {
		return parent;
	}

	public void setParent(String parent) {
		this.parent = parent;
	}

	public String getPlayerId() {
		return playerId;
	}

	public void setPlayerId(String playerId) {
		this.playerId = playerId;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("21.25em");
		mainLayout.setHeight("12.5em");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("21.25em");
		setHeight("12.5em");
		
		// gridLayout_cardInfo
		gridLayout_cardInfo = buildGridLayout_cardInfo();
		mainLayout.addComponent(gridLayout_cardInfo);
		
		// horizontalLayout_cardText
		horizontalLayout_cardText = buildHorizontalLayout_cardText();
		mainLayout.addComponent(horizontalLayout_cardText);
		mainLayout.setExpandRatio(horizontalLayout_cardText, 1.0f);
		
		// horizontalLayout_cardLinks
		horizontalLayout_cardLinks = buildHorizontalLayout_cardLinks();
		mainLayout.addComponent(horizontalLayout_cardLinks);
		mainLayout.setExpandRatio(horizontalLayout_cardLinks, 0.1f);
		mainLayout.setComponentAlignment(horizontalLayout_cardLinks,
				new Alignment(24));
		
		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_cardInfo() {
		// common part: create layout
		gridLayout_cardInfo = new GridLayout();
		gridLayout_cardInfo.setImmediate(false);
		gridLayout_cardInfo.setWidth("21.25em");
		gridLayout_cardInfo.setHeight("2.188em");
		gridLayout_cardInfo.setMargin(false);
		gridLayout_cardInfo.setColumns(6);
		
		// cardType
		cardType = new Label();
		cardType.setImmediate(false);
		cardType.setWidth("-1px");
		cardType.setHeight("-1px");
		cardType.setValue("Label");
		gridLayout_cardInfo.addComponent(cardType, 0, 0);
		gridLayout_cardInfo.setComponentAlignment(cardType, new Alignment(48));
		
		// user
		user = new Link();
		user.setCaption("Link");
		user.setImmediate(false);
		user.setWidth("-1px");
		user.setHeight("-1px");
		gridLayout_cardInfo.addComponent(user, 1, 0);
		gridLayout_cardInfo.setComponentAlignment(user, new Alignment(48));
		
		// date
		date = new Label();
		date.setImmediate(false);
		date.setWidth("-1px");
		date.setHeight("-1px");
		date.setValue("Label");
		gridLayout_cardInfo.addComponent(date, 2, 0);
		gridLayout_cardInfo.setComponentAlignment(date, new Alignment(34));
		
		// voteCount
		voteCount = new Label();
		voteCount.setImmediate(false);
		voteCount.setWidth("-1px");
		voteCount.setHeight("-1px");
		voteCount.setValue("Label");
		gridLayout_cardInfo.addComponent(voteCount, 3, 0);
		gridLayout_cardInfo.setComponentAlignment(voteCount, new Alignment(34));
		
		// voteContainer
		voteContainer = buildVoteContainer();
		gridLayout_cardInfo.addComponent(voteContainer, 4, 0);
		gridLayout_cardInfo.setComponentAlignment(voteContainer, new Alignment(
				48));
		
		// nativeButton_favorite
		nativeButton_favorite = new NativeButton();
		nativeButton_favorite.setCaption("NativeButton");
		nativeButton_favorite.setImmediate(true);
		nativeButton_favorite.setWidth("2.188em");
		nativeButton_favorite.setHeight("2.188em");
		gridLayout_cardInfo.addComponent(nativeButton_favorite, 5, 0);
		gridLayout_cardInfo.setComponentAlignment(nativeButton_favorite,
				new Alignment(33));
		
		return gridLayout_cardInfo;
	}

	@AutoGenerated
	private VerticalLayout buildVoteContainer() {
		// common part: create layout
		voteContainer = new VerticalLayout();
		voteContainer.setImmediate(false);
		voteContainer.setWidth("1.563em");
		voteContainer.setHeight("2.188em");
		voteContainer.setMargin(false);
		
		// nativeButton_upvote
		nativeButton_upvote = new NativeButton();
		nativeButton_upvote.setCaption("NativeButton");
		nativeButton_upvote.setImmediate(true);
		nativeButton_upvote.setWidth("1.25em");
		nativeButton_upvote.setHeight("0.938em");
		voteContainer.addComponent(nativeButton_upvote);
		
		// nativeButton_downvote
		nativeButton_downvote = new NativeButton();
		nativeButton_downvote.setCaption("NativeButton");
		nativeButton_downvote.setImmediate(true);
		nativeButton_downvote.setWidth("1.25em");
		nativeButton_downvote.setHeight("0.938em");
		voteContainer.addComponent(nativeButton_downvote);
		
		return voteContainer;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardText() {
		// common part: create layout
		horizontalLayout_cardText = new HorizontalLayout();
		horizontalLayout_cardText.setImmediate(false);
		horizontalLayout_cardText.setWidth("100.0%");
		horizontalLayout_cardText.setHeight("100.0%");
		horizontalLayout_cardText.setMargin(false);
		
		// nativeButton_text
		nativeButton_text = new NativeButton();
		nativeButton_text.setCaption("NativeButton");
		nativeButton_text.setImmediate(true);
		nativeButton_text.setWidth("100.0%");
		nativeButton_text.setHeight("100.0%");
		horizontalLayout_cardText.addComponent(nativeButton_text);
		
		return horizontalLayout_cardText;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardLinks() {
		// common part: create layout
		horizontalLayout_cardLinks = new HorizontalLayout();
		horizontalLayout_cardLinks.setImmediate(false);
		horizontalLayout_cardLinks.setWidth("100.0%");
		horizontalLayout_cardLinks.setHeight("-1px");
		horizontalLayout_cardLinks.setMargin(false);
		
		// horizontalLayout_tags
		horizontalLayout_tags = new HorizontalLayout();
		horizontalLayout_tags.setImmediate(false);
		horizontalLayout_tags.setWidth("-1px");
		horizontalLayout_tags.setHeight("100.0%");
		horizontalLayout_tags.setMargin(false);
		horizontalLayout_tags.setSpacing(true);
		horizontalLayout_cardLinks.addComponent(horizontalLayout_tags);
		horizontalLayout_cardLinks.setExpandRatio(horizontalLayout_tags, 1.0f);
		
		// nativeButton_addCard
		nativeButton_addCard = new NativeButton();
		nativeButton_addCard.setCaption("NativeButton");
		nativeButton_addCard.setImmediate(true);
		nativeButton_addCard.setWidth("-1px");
		nativeButton_addCard.setHeight("-1px");
		horizontalLayout_cardLinks.addComponent(nativeButton_addCard);
		horizontalLayout_cardLinks.setComponentAlignment(nativeButton_addCard,
				new Alignment(10));
		
		return horizontalLayout_cardLinks;
	}

}
