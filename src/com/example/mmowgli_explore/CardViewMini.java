package com.example.mmowgli_explore;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Link;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.VerticalLayout;

public class CardViewMini extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardLinks;
	@AutoGenerated
	private NativeButton nativeButton_addCard;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardText;
	@AutoGenerated
	private NativeButton nativeButton_text;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_cardInfo;
	@AutoGenerated
	private NativeButton button_favorite;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private NativeButton button_downvote;
	@AutoGenerated
	private NativeButton button_upvote;
	@AutoGenerated
	private Label label_voteCount;
	@AutoGenerated
	private Label label_date;
	@AutoGenerated
	private Link link_user;
	@AutoGenerated
	private Label label_cardType;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CardViewMini() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		//set topbar label & link styling
		label_cardType.setStyleName("center");
		link_user.setStyleName("center");
		label_date.setStyleName("center");
		label_voteCount.setStyleName("center");
		
		
		//card upvote / downvote
		button_upvote.setCaption(null);
		button_upvote.setIcon(new ThemeResource("images/icons/cards/upArrrow.png"));
		button_upvote.setStyleName("cardButtons");
		
		button_downvote.setCaption(null);
		button_downvote.setIcon(new ThemeResource("images/icons/cards/downArrow.png"));
		button_downvote.setStyleName("cardButtons");
		
		//card favorite
		button_favorite.setCaption(null);
		button_favorite.setIcon(new ThemeResource("images/icons/cards/star.png"));
		button_favorite.setStyleName("cardTextMini");
		
		//card text
		nativeButton_text.setCaption("Lorem ipsum dolor sit amet, consectetur adipiscing elit Cras sodales eros ut ipsum ultricies eleifend. Vivamus justo ipsum, rutrum vel orciv"); //140 characters
		nativeButton_text.setStyleName("cardTextMini");
		
		//add card
		nativeButton_addCard.setCaption(null);
		nativeButton_addCard.setIcon(new ThemeResource("images/icons/cards/plus.png"));
		nativeButton_addCard.setStyleName("cardTextMini");
		
		horizontalLayout_cardText.setStyleName("cardText");
		horizontalLayout_cardLinks.setStyleName("cardBottom");
	}
	
	/**
	 * Sets a card's background of the top bar
	 * @param cardType - specifies which of the four types a card should be
	 */
	public void setCardColor(String cardType){
		
		horizontalLayout_cardInfo.setStyleName("cardType" + cardType + "Mini");
		
	}
	
	/**
	 * Sets the card type, This changes the card's label to reflect the type.
	 * 	e.g. cardType = Adapt -> will change the label of the card to reflect the type.
	 * 
	 * TODO -> have this method call SetCardColor to automatically change the styling when the type is set.
	 * 
	 * @param cardType -> Specifies what type of card
	 */
	public void setCardType(String cardType){
		
		label_cardType.setValue(cardType);
		setCardColor(cardType);
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("340px");
		mainLayout.setHeight("100px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("340px");
		setHeight("100px");
		
		// horizontalLayout_cardInfo
		horizontalLayout_cardInfo = buildHorizontalLayout_cardInfo();
		mainLayout.addComponent(horizontalLayout_cardInfo);
		mainLayout.setComponentAlignment(horizontalLayout_cardInfo,
				new Alignment(20));
		
		// horizontalLayout_cardText
		horizontalLayout_cardText = buildHorizontalLayout_cardText();
		mainLayout.addComponent(horizontalLayout_cardText);
		mainLayout.setExpandRatio(horizontalLayout_cardText, 1.0f);
		
		// horizontalLayout_cardLinks
		horizontalLayout_cardLinks = buildHorizontalLayout_cardLinks();
		mainLayout.addComponent(horizontalLayout_cardLinks);
		mainLayout.setExpandRatio(horizontalLayout_cardLinks, 1.0f);
		mainLayout.setComponentAlignment(horizontalLayout_cardLinks,
				new Alignment(24));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardInfo() {
		// common part: create layout
		horizontalLayout_cardInfo = new HorizontalLayout();
		horizontalLayout_cardInfo.setImmediate(false);
		horizontalLayout_cardInfo.setWidth("-1px");
		horizontalLayout_cardInfo.setHeight("-1px");
		horizontalLayout_cardInfo.setMargin(false);
		horizontalLayout_cardInfo.setSpacing(true);
		
		// label_cardType
		label_cardType = new Label();
		label_cardType.setImmediate(false);
		label_cardType.setWidth("100.0%");
		label_cardType.setHeight("35px");
		label_cardType.setValue("Expand");
		horizontalLayout_cardInfo.addComponent(label_cardType);
		horizontalLayout_cardInfo.setComponentAlignment(label_cardType,
				new Alignment(9));
		
		// link_user
		link_user = new Link();
		link_user.setCaption("User 2000");
		link_user.setImmediate(false);
		link_user.setWidth("100.0%");
		link_user.setHeight("35px");
		horizontalLayout_cardInfo.addComponent(link_user);
		horizontalLayout_cardInfo.setComponentAlignment(link_user,
				new Alignment(9));
		
		// label_date
		label_date = new Label();
		label_date.setImmediate(false);
		label_date.setWidth("100.0%");
		label_date.setHeight("35px");
		label_date.setValue("5/01/15");
		horizontalLayout_cardInfo.addComponent(label_date);
		horizontalLayout_cardInfo.setComponentAlignment(label_date,
				new Alignment(9));
		
		// label_voteCount
		label_voteCount = new Label();
		label_voteCount.setImmediate(false);
		label_voteCount.setWidth("100.0%");
		label_voteCount.setHeight("35px");
		label_voteCount.setValue("25");
		horizontalLayout_cardInfo.addComponent(label_voteCount);
		horizontalLayout_cardInfo.setComponentAlignment(label_voteCount,
				new Alignment(9));
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		horizontalLayout_cardInfo.addComponent(verticalLayout_2);
		
		// button_favorite
		button_favorite = new NativeButton();
		button_favorite.setCaption("NativeButton");
		button_favorite.setImmediate(true);
		button_favorite.setWidth("100.0%");
		button_favorite.setHeight("35px");
		horizontalLayout_cardInfo.addComponent(button_favorite);
		
		return horizontalLayout_cardInfo;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("20px");
		verticalLayout_2.setHeight("35px");
		verticalLayout_2.setMargin(false);
		
		// button_upvote
		button_upvote = new NativeButton();
		button_upvote.setCaption("NativeButton");
		button_upvote.setImmediate(true);
		button_upvote.setWidth("20px");
		button_upvote.setHeight("15px");
		verticalLayout_2.addComponent(button_upvote);
		
		// button_downvote
		button_downvote = new NativeButton();
		button_downvote.setCaption("NativeButton");
		button_downvote.setImmediate(true);
		button_downvote.setWidth("20px");
		button_downvote.setHeight("15px");
		verticalLayout_2.addComponent(button_downvote);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardText() {
		// common part: create layout
		horizontalLayout_cardText = new HorizontalLayout();
		horizontalLayout_cardText.setImmediate(false);
		horizontalLayout_cardText.setWidth("100.0%");
		horizontalLayout_cardText.setHeight("-1px");
		horizontalLayout_cardText.setMargin(false);
		
		// nativeButton_text
		nativeButton_text = new NativeButton();
		nativeButton_text.setCaption("NativeButton");
		nativeButton_text.setImmediate(true);
		nativeButton_text.setWidth("100.0%");
		nativeButton_text.setHeight("50.0%");
		horizontalLayout_cardText.addComponent(nativeButton_text);
		
		return horizontalLayout_cardText;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_cardLinks() {
		// common part: create layout
		horizontalLayout_cardLinks = new HorizontalLayout();
		horizontalLayout_cardLinks.setImmediate(false);
		horizontalLayout_cardLinks.setWidth("100.0%");
		horizontalLayout_cardLinks.setHeight("-1px");
		horizontalLayout_cardLinks.setMargin(false);
		
		// nativeButton_addCard
		nativeButton_addCard = new NativeButton();
		nativeButton_addCard.setCaption("NativeButton");
		nativeButton_addCard.setImmediate(true);
		nativeButton_addCard.setWidth("-1px");
		nativeButton_addCard.setHeight("-1px");
		horizontalLayout_cardLinks.addComponent(nativeButton_addCard);
		horizontalLayout_cardLinks.setComponentAlignment(nativeButton_addCard,
				new Alignment(10));
		
		return horizontalLayout_cardLinks;
	}
}
