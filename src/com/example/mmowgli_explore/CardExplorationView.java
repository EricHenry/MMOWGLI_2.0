package com.example.mmowgli_explore;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import com.example.mmowgli_backend.Card;
import com.example.mmowgli_backend.CardList;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class CardExplorationView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	@AutoGenerated
	private HorizontalLayout mainLayout;


	@AutoGenerated
	private VerticalLayout verticalLayout_4;


	@AutoGenerated
	private Panel panel_cardChildren;


	@AutoGenerated
	private VerticalLayout verticalLayout_childView;


	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;


	@AutoGenerated
	private ComboBox comboBox_1;


	@AutoGenerated
	private Label label_sort;


	@AutoGenerated
	private NativeButton nativeButton_search;


	@AutoGenerated
	private TextField textField_search;


	@AutoGenerated
	private Label label_childTitle;


	@AutoGenerated
	private VerticalLayout verticalLayout_3;


	@AutoGenerated
	private Panel panel_currentCards;


	@AutoGenerated
	private VerticalLayout verticalLayout_mainView;


	@AutoGenerated
	private Label label_mainTitle;


	@AutoGenerated
	private VerticalLayout verticalLayout_2;


	@AutoGenerated
	private Panel panel_history;


	@AutoGenerated
	private VerticalLayout verticalLayout_historyView;


	@AutoGenerated
	private Label label_HistoryTitle;


	//Attributes
	private String chosenCardId;
	private CardView currentChosenCard = null;						//Keep track of the card view that has been clicked.
	private CardView[] currentlyDisplayedCards;						//Current List of cards listed in the middle panel
	private CardView[] currentlyDisplayedChildren;					//Current List of child cards being displyed
	private CardView[] currentCardHistory;							//Current History List being displayed
	
	//TODO change to updated version
	private CardView[] cardsToAdd	= new CardView[10];
	private CardView[] children		= new CardView[10];
	private CardView[] history		= new CardView[8];
	
	private CardList cardsToMainView;
	private CardList cardsToChildView;
	private CardList cardsToHistoryView;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CardExplorationView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		//Instantiate Card Lists
		cardsToMainView = new CardList();
		cardsToChildView = new CardList();
		cardsToHistoryView = new CardList();
		
		//set Id's of the 3 different views,: main view, child view, history view
		verticalLayout_mainView.setId("main");
		verticalLayout_childView.setId("child");
		verticalLayout_historyView.setId("history");
		
		//create random cards
		createRandomCards();
		
		//set different background colors for cards
		initCards();
		initChildCards();
		initHistoryCards();
		
		//Initiate card for testing
		currentChosenCard= new CardView((CardView)verticalLayout_mainView.getComponent(4));
		currentChosenCard.expandCardView();
		currentChosenCard.removeTransparency();

		//search button
		nativeButton_search.setCaption(null);
		nativeButton_search.setIcon(new ThemeResource("images/icons/sidebar/spyglass25.png"));
		nativeButton_search.setStyleName("cardTextMini");
		
		//panel styling
		panel_currentCards.setStyleName("borderless");
		panel_history.setStyleName("borderless");
		panel_cardChildren.setStyleName("borderless");
		
	}
	
	/*
	 * Needs to be removed - just for testing purposes
	 */
	public void createRandomCards(){
		Card random[] = new Card[30];
		
		//150 Characters
		String text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit Cras sodales eros ut ipsum ultricies eleifend. Vivamus justo ipsum, rutrum vel orciv vel orciv";
		
		for(int i = 0; i < 30; i++){
			random[i] = new Card (i, (i + 100), text, "Expand", 5, 60, new Timestamp(2015, 5, 25, 12, 0, 0, 0)); 
			
			if(i < 10)
				cardsToMainView.addCard(random[i]);
			else if(i >= 10 && i < 25){
				cardsToChildView.addCard(random[i]);
				random[i].parent = 105;
			}else
				cardsToHistoryView.addCard(random[i]);
			
		}
	}
	
	/**
	 * Initialize Cards that need to be added to the Main View of the Card Explorer
	 * 	Should only be used after a query is made to get the corresponding CardList 
	 * 	from the database.
	 */
	private void initCards(){
		
		while(cardsToMainView.size() > 0){
			
			//get the current first node of the card list
			Card currentCardData = cardsToMainView.getCard();
			
			//get the current card data
			String id = Integer.toString(currentCardData.cardId);
			String pId = Integer.toString(currentCardData.playerId);
			String cardText = currentCardData.textUser;
			String cardType = currentCardData.cardType;
			String parent = Integer.toString(currentCardData.parent);
			String votes = Integer.toString(currentCardData.votes);
			String date = new SimpleDateFormat("MM/dd/yyyy").format(currentCardData.time.getDate());
			
			//create a new card view using the card data.
			CardView newCard = new CardView(id, pId, cardText, cardType, parent, votes, date);
			newCard.setCardType(cardType);
			
			//add card to the component
			verticalLayout_mainView.addComponent(newCard);	
			
			styleCardView(verticalLayout_mainView, newCard);
		}
	}
	
	public void initChildCards(){

		while(cardsToChildView.size() > 0){
			
			//System.out.println("init cards: " + i);
			
			//get the current first node of the card list
			Card currentCardData = cardsToChildView.getCard();
			
			//get the current card data
			String id = Integer.toString(currentCardData.cardId);
			String pId = Integer.toString(currentCardData.playerId);
			String cardText = currentCardData.textUser;
			String cardType = currentCardData.cardType;
			String parent = Integer.toString(currentCardData.parent);
			String votes = Integer.toString(currentCardData.votes);
			String date = new SimpleDateFormat("MM/dd/yyyy").format(currentCardData.time.getDate());
			
			//create a new card view using the card data.
			CardView newCard = new CardView(id, pId, cardText, cardType, parent, votes, date);
			newCard.setCardType(cardType);	
			
			//add card to the component
			verticalLayout_childView.addComponent(newCard);	
			
			styleCardView(verticalLayout_childView, newCard);

		}
	}
	
	public void initHistoryCards(){
		while(cardsToHistoryView.size() > 0){
			
			//System.out.println("init cards: " + i);
			
			//get the current first node of the card list
			Card currentCardData = cardsToHistoryView.getCard();
			
			//get the current card data
			String id = Integer.toString(currentCardData.cardId);
			String pId = Integer.toString(currentCardData.playerId);
			String cardText = currentCardData.textUser;
			String cardType = currentCardData.cardType;
			String parent = Integer.toString(currentCardData.parent);
			String votes = Integer.toString(currentCardData.votes);
			String date = new SimpleDateFormat("MM/dd/yyyy").format(currentCardData.time.getDate());
			
			//create a new card view using the card data.
			CardView newCard = new CardView(id, pId, cardText, cardType, parent, votes, date);
			newCard.setCardType(cardType);	
			
			//add card to the component
			verticalLayout_historyView.addComponent(newCard);
			
			styleCardView(verticalLayout_historyView, newCard);
		}
		
	}
	
	/**
	 * 
	 * @param clickedCard
	 */
	public void mainViewClickListener(CardView clickedCard){
		
		//Listen to the cards text button
		clickedCard.getNativeButton_text().addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
				//check if the clicked card is the current chosen card
				//if it is not, then minimize the current card and maximize the new chosen card
				if(!clickedCard.equals(currentChosenCard)){

					//Make sure the current card is not null
					try{
						currentChosenCard.addTransparency();
						currentChosenCard.shrinkCardView();
						
						clickedCard.expandCardView();
						clickedCard.removeTransparency();
						
					}catch(NullPointerException e){
						clickedCard.expandCardView();
						clickedCard.removeTransparency();
					}
					
					//Set the clicked card as the new current card
					//verticalLayout_historyView.addComponent(new CardView(currentChosenCard));
					currentChosenCard = new CardView(clickedCard);
					
					//TODO query database for children list
					//TODO remove current children
					//TODO add new children list to the explorer
				}
			}
			
		});		
	}
	
	/**
	 * 
	 * @param clickedCard -> The card that was clicked by the user
	 */
	public void childViewClickListener(CardView clickedCard){
		
		//Listen to the cards text button
		clickedCard.getNativeButton_text().addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
				try{
					//TODO query database to get clicked card
				
					String id = currentChosenCard.getCardId();
					String pId = currentChosenCard.getUser().getCaption();
					String cardText = currentChosenCard.getNativeButton_text().getCaption();
					String cardType = currentChosenCard.getCardType().getValue();
					String parent = currentChosenCard.getCardParent();
					String votes = currentChosenCard.getVoteCount().getValue();
					String date = currentChosenCard.getDate().getValue();
					CardView temp = new CardView(id, pId, cardText, cardType, parent, votes, date);
					
					//move the current chosen card and add it to the history view
					verticalLayout_historyView.addComponent(temp);
					styleCardView(verticalLayout_historyView, temp);
					
					//remove the current list of card in the main view
					verticalLayout_mainView.removeAllComponents();
					
					//move the current child view list move it to the main view
					int numberOfChildren = verticalLayout_childView.getComponentCount();
					for(int index = 0; index < numberOfChildren; index++){
						id = ((CardView)verticalLayout_childView.getComponent(index)).getCardId();
						pId = ((CardView)verticalLayout_childView.getComponent(index)).getUser().getCaption();
						cardText = ((CardView)verticalLayout_childView.getComponent(index)).getNativeButton_text().getCaption();
						cardType = ((CardView)verticalLayout_childView.getComponent(index)).getCardType().getValue();
						parent = ((CardView)verticalLayout_childView.getComponent(index)).getCardParent();
						votes = ((CardView)verticalLayout_childView.getComponent(index)).getVoteCount().getValue();
						date = ((CardView)verticalLayout_childView.getComponent(index)).getDate().getValue();
						CardView temp2 = new CardView(id, pId, cardText, cardType, parent, votes, date);
						
						verticalLayout_mainView.addComponent(temp2);
						
						styleCardView(verticalLayout_mainView, temp2);
						//setBaseCardStyle(temp2);
						//verticalLayout_mainView.setExpandRatio(temp2, 1.0f);
						
						//check if the card that is currently indexed is the clicked card expand the view and remove the styling
						if(id.equalsIgnoreCase(clickedCard.getCardId())){
							//set the clicked card as the new chosen card
							currentChosenCard = new CardView(temp2);
						}
					}

					//remove the current child components
					verticalLayout_childView.removeAllComponents();
					
					//TODO query the database to get the children of the currently clicked card
					//add the newly acquired child cards to the ChildView
					//Set the styling of the card
					//
					
				}catch(NullPointerException e){
					//TODO ADD ERROR HANDLING
				}
				
				//Focus current chosen card in main view
				currentChosenCard.removeTransparency();
				currentChosenCard.expandCardView();
			}
			
		});		
	}
	
	/**
	 * Style the cards in the main view with the default values
	 */
	public void styleCardView(VerticalLayout view, CardView card){
		//base Styling
		setBaseCardStyle(card);
		
		//setExpansion ratio
		view.setExpandRatio(card, 1.0f);
		
		if(view.getId().equalsIgnoreCase("main")){
			card.addTransparency();
			mainViewClickListener(card);
		}else if(view.getId().equalsIgnoreCase("child")){
			childViewClickListener(card);
		}else {
			//historyViewClickLitener(card);
			mainViewClickListener(card);
		}
		
	}
	
	/**
	 * Provides the CardView with a baseline style to fit within the Explorer
	 * 
	 * @param card -> CardView object that will receive the basic styling values
	 */
 	private void setBaseCardStyle(CardView card){
 		card.setImmediate(false);
 		card.setWidth("340px");
 		card.setHeight("-1px");
 	}
	

	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("37.5em");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("37.5em");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2);
		mainLayout.setComponentAlignment(verticalLayout_2, new Alignment(48));
		
		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		mainLayout.addComponent(verticalLayout_3);
		mainLayout.setComponentAlignment(verticalLayout_3, new Alignment(48));
		
		// verticalLayout_4
		verticalLayout_4 = buildVerticalLayout_4();
		mainLayout.addComponent(verticalLayout_4);
		mainLayout.setComponentAlignment(verticalLayout_4, new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("-1px");
		verticalLayout_2.setHeight("31.25em");
		verticalLayout_2.setMargin(false);
		
		// label_HistoryTitle
		label_HistoryTitle = new Label();
		label_HistoryTitle.setImmediate(false);
		label_HistoryTitle.setWidth("-1px");
		label_HistoryTitle.setHeight("-1px");
		label_HistoryTitle.setValue("History");
		verticalLayout_2.addComponent(label_HistoryTitle);
		verticalLayout_2.setComponentAlignment(label_HistoryTitle,
				new Alignment(24));
		
		// panel_history
		panel_history = buildPanel_history();
		verticalLayout_2.addComponent(panel_history);
		verticalLayout_2.setExpandRatio(panel_history, 1.0f);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private Panel buildPanel_history() {
		// common part: create layout
		panel_history = new Panel();
		panel_history.setImmediate(false);
		panel_history.setWidth("100.0%");
		panel_history.setHeight("100.0%");
		
		// verticalLayout_historyView
		verticalLayout_historyView = new VerticalLayout();
		verticalLayout_historyView.setImmediate(false);
		verticalLayout_historyView.setWidth("22.5em");
		verticalLayout_historyView.setHeight("-1px");
		verticalLayout_historyView.setMargin(false);
		verticalLayout_historyView.setSpacing(true);
		panel_history.setContent(verticalLayout_historyView);
		
		return panel_history;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("-1px");
		verticalLayout_3.setHeight("31.25em");
		verticalLayout_3.setMargin(false);
		
		// label_mainTitle
		label_mainTitle = new Label();
		label_mainTitle.setImmediate(false);
		label_mainTitle.setWidth("-1px");
		label_mainTitle.setHeight("-1px");
		label_mainTitle.setValue("Main");
		verticalLayout_3.addComponent(label_mainTitle);
		verticalLayout_3.setComponentAlignment(label_mainTitle, new Alignment(
				24));
		
		// panel_currentCards
		panel_currentCards = buildPanel_currentCards();
		verticalLayout_3.addComponent(panel_currentCards);
		verticalLayout_3.setExpandRatio(panel_currentCards, 1.0f);
		
		return verticalLayout_3;
	}

	@AutoGenerated
	private Panel buildPanel_currentCards() {
		// common part: create layout
		panel_currentCards = new Panel();
		panel_currentCards.setImmediate(false);
		panel_currentCards.setWidth("100.0%");
		panel_currentCards.setHeight("100.0%");
		
		// verticalLayout_mainView
		verticalLayout_mainView = new VerticalLayout();
		verticalLayout_mainView.setImmediate(false);
		verticalLayout_mainView.setWidth("22.5em");
		verticalLayout_mainView.setHeight("-1px");
		verticalLayout_mainView.setMargin(false);
		verticalLayout_mainView.setSpacing(true);
		panel_currentCards.setContent(verticalLayout_mainView);
		
		return panel_currentCards;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_4() {
		// common part: create layout
		verticalLayout_4 = new VerticalLayout();
		verticalLayout_4.setImmediate(false);
		verticalLayout_4.setWidth("-1px");
		verticalLayout_4.setHeight("31.25em");
		verticalLayout_4.setMargin(false);
		
		// label_childTitle
		label_childTitle = new Label();
		label_childTitle.setImmediate(false);
		label_childTitle.setWidth("-1px");
		label_childTitle.setHeight("-1px");
		label_childTitle.setValue("Children");
		verticalLayout_4.addComponent(label_childTitle);
		verticalLayout_4.setComponentAlignment(label_childTitle, new Alignment(
				24));
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		verticalLayout_4.addComponent(horizontalLayout_1);
		verticalLayout_4.setExpandRatio(horizontalLayout_1, 0.08f);
		
		// panel_cardChildren
		panel_cardChildren = buildPanel_cardChildren();
		verticalLayout_4.addComponent(panel_cardChildren);
		verticalLayout_4.setExpandRatio(panel_cardChildren, 1.0f);
		
		return verticalLayout_4;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("23.438em");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// textField_search
		textField_search = new TextField();
		textField_search.setImmediate(false);
		textField_search.setWidth("5.625em");
		textField_search.setHeight("1.563em");
		horizontalLayout_1.addComponent(textField_search);
		
		// nativeButton_search
		nativeButton_search = new NativeButton();
		nativeButton_search.setCaption("NativeButton");
		nativeButton_search.setImmediate(true);
		nativeButton_search.setWidth("-1px");
		nativeButton_search.setHeight("-1px");
		horizontalLayout_1.addComponent(nativeButton_search);
		
		// label_sort
		label_sort = new Label();
		label_sort.setImmediate(false);
		label_sort.setWidth("-1px");
		label_sort.setHeight("-1px");
		label_sort.setValue("Sort By:");
		horizontalLayout_1.addComponent(label_sort);
		horizontalLayout_1.setComponentAlignment(label_sort, new Alignment(48));
		
		// comboBox_1
		comboBox_1 = new ComboBox();
		comboBox_1.setImmediate(false);
		comboBox_1.setWidth("5.625em");
		comboBox_1.setHeight("1.563em");
		horizontalLayout_1.addComponent(comboBox_1);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private Panel buildPanel_cardChildren() {
		// common part: create layout
		panel_cardChildren = new Panel();
		panel_cardChildren.setImmediate(false);
		panel_cardChildren.setWidth("100.0%");
		panel_cardChildren.setHeight("100.0%");
		
		// verticalLayout_childView
		verticalLayout_childView = new VerticalLayout();
		verticalLayout_childView.setImmediate(false);
		verticalLayout_childView.setWidth("22.5em");
		verticalLayout_childView.setHeight("-1px");
		verticalLayout_childView.setMargin(false);
		verticalLayout_childView.setSpacing(true);
		panel_cardChildren.setContent(verticalLayout_childView);
		
		return panel_cardChildren;
	}

}
