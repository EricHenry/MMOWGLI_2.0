/**
 * @Author: Eric H Correia
 *
 * This class creates 
 * 
 */

package com.example.mmowgli_explore;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import com.example.mmowgli_backend.Card;
import com.example.mmowgli_backend.CardList;
import com.example.mmowgli_backend.MmowgliDB;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class CardExplorationView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout verticalLayout_4;

	@AutoGenerated
	private Panel panel_cardChildren;

	@AutoGenerated
	private VerticalLayout verticalLayout_childView;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private ComboBox comboBox_1;

	@AutoGenerated
	private Label label_sort;

	@AutoGenerated
	private NativeButton nativeButton_search;

	@AutoGenerated
	private TextField textField_search;

	@AutoGenerated
	private Label label_childTitle;

	@AutoGenerated
	private VerticalLayout verticalLayout_3;

	@AutoGenerated
	private Panel panel_currentCards;

	@AutoGenerated
	private VerticalLayout verticalLayout_mainView;

	@AutoGenerated
	private Label label_mainTitle;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private Panel panel_history;

	@AutoGenerated
	private VerticalLayout verticalLayout_historyView;

	@AutoGenerated
	private Label label_HistoryTitle;

	// Attributes
	private CardView currentChosenCard = null; // Keep track of the card view
												// that has been clicked.
	private boolean displayingHistory = false;
	private boolean displayingSiblings = false;
	private boolean displayingChlidren = false;

	private CardList cardsToMainView;
	private CardList cardsToChildView;
	private CardList cardsToHistoryView;
	private CardList topcards;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public CardExplorationView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// Instantiate Card Lists
		cardsToMainView = new CardList();
		cardsToChildView = new CardList();
		cardsToHistoryView = new CardList();

		// set Id's of the 3 different views,: main view, child view, history
		// view
		verticalLayout_mainView.setId("main");
		verticalLayout_childView.setId("child");
		verticalLayout_historyView.setId("history");

		try {
			topcards = MmowgliDB.topCardsQuery();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// create random cards
		createRandomCards();

		// Initiate card for testing
		try {
			currentChosenCard = MmowgliDB.createCardView(MmowgliDB
					.oneCardQuery(5));
			// currentChosenCard.expandCardView();
			// currentChosenCard.removeTransparency();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// set different background colors for cards
		displayCardList(topcards, verticalLayout_mainView);
		displayCardList(cardsToChildView, verticalLayout_childView);
		displayCardList(cardsToHistoryView, verticalLayout_historyView);

		// search button
		nativeButton_search.setCaption(null);
		nativeButton_search.setIcon(new ThemeResource(
				"images/icons/sidebar/spyglass25.png"));
		nativeButton_search.setStyleName("cardTextMini");

		// panel styling
		panel_currentCards.setStyleName("borderless");
		panel_history.setStyleName("borderless");
		panel_cardChildren.setStyleName("borderless");

	}

	/*
	 * Needs to be removed - just for testing purposes
	 */
	public void createRandomCards() {
		Card random[] = new Card[30];

		// 150 Characters
		String text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit Cras sodales eros ut ipsum ultricies eleifend. Vivamus justo ipsum, rutrum vel orciv vel orciv";

		for (int i = 0; i < 30; i++) {
			random[i] = new Card(i, (i + 100), text, "Expand", 5, 60,new Timestamp(2015, 5, 25, 12, 0, 0, 0));

			if (i < 10)
				cardsToMainView.addCard(random[i]);
			else if (i >= 10 && i < 25) {
				cardsToChildView.addCard(random[i]);
				random[i].parent = 105;
			} else
				cardsToHistoryView.addCard(random[i]);

		}
	}

	/**
	 * This method removes all the cards in the exploration view
	 * 
	 */
	public void clearExplorationView() {
		verticalLayout_mainView.removeAllComponents();
		verticalLayout_childView.removeAllComponents();
		verticalLayout_historyView.removeAllComponents();
	}

	/**
	 * This method allows you to reset the Card Explorer View using the a Card's
	 * data that is taken in as a parameter
	 * 
	 * @param cardData
	 *            -> Which card to focus the Explorer View too
	 */
	public void setNewChosenCard(Card cardData) {
		// clear the views
		clearExplorationView();

		// set the card as the new current card and display it
		currentChosenCard = MmowgliDB.createCardView(cardData);
		;

		// get the cards children and display them
		try {
			CardList children = MmowgliDB.allChildrenQuery(cardData.cardId);
			displayCardList(children, verticalLayout_childView);

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// get the main cards and display them
		try {
			CardList main = MmowgliDB.allSiblingQuery(cardData.cardId);
			displayCardList(main, verticalLayout_mainView);

		} catch (SQLException e) {
			e.printStackTrace();
		}

		// get the history cards and display them
		try {
			CardList history = MmowgliDB.allParentQuery(cardData.cardId);
			displayCardList(history, verticalLayout_historyView);

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	/**
	 * This method takes in a list of card data and displays it to the card
	 * explorer
	 * 
	 * @param currentList
	 *            -> List of card data
	 * @param toDisplay
	 *            -> which view to add the card views to.
	 */
	public void displayCardList(CardList currentList, VerticalLayout toDisplay) {
		while (currentList.size() > 0) {

			// get the current first node of the card list
			Card currentCardData = currentList.getCard();

			// create a new card view using the card data.
			CardView newCard = MmowgliDB.createCardView(currentCardData);

			// add card to the component
			toDisplay.addComponent(newCard);
			styleCardView(toDisplay, newCard);

			// if the chosen card is equal to the current card in the list of
			// data
			// then display the card
			if (newCard.getCardId().equalsIgnoreCase(currentChosenCard.getCardId())) {
				newCard.expandCardView();
				newCard.removeTransparency();
				currentChosenCard = newCard;
			}

		}
	}

	/**
	 * Set the click listener for cards that are being displayed in the main view
	 * 	of the card explorer
	 * 
	 * @param clickedCard	-> Card that is in the main view of the card explorer
	 */
	public void mainViewCardClickListener(CardView clickedCard) {

		// Listen to the cards text button
		clickedCard.getNativeButton_text().addClickListener(
				new NativeButton.ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {
						// TODO Auto-generated method stub

						// if the clicked card is not the current chosen card
						// then minimize the current card and maximize the new
						// chosen card
						if (!clickedCard.getCardId().equalsIgnoreCase(
								currentChosenCard.getCardId())) {

							// Make sure the current card is not null
							try {
								currentChosenCard.addTransparency();
								currentChosenCard.shrinkCardView();

								clickedCard.expandCardView();
								clickedCard.removeTransparency();

							} catch (NullPointerException e) {
								clickedCard.expandCardView();
								clickedCard.removeTransparency();
							}

							// Set the clicked card as the new current card
							currentChosenCard = new CardView(clickedCard);

							try {
								// remove current children
								verticalLayout_childView.removeAllComponents();

								// query database for children list
								CardList children = MmowgliDB.allChildrenQuery(Integer.parseInt(clickedCard.getCardId()));

								// add new children list to the explorer
								displayCardList(children,
										verticalLayout_childView);

							} catch (NumberFormatException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}

							// if there are cards not displayed in the history
							// view
							// then try to display the history
							if (!displayingHistory) {
								try {
									// remove current parents from history view
									verticalLayout_historyView.removeAllComponents();

									// query database for parent list
									CardList history = MmowgliDB.allParentQuery(Integer.parseInt(clickedCard.getCardId()));

									// add new parent list to the explorer
									displayCardList(history, verticalLayout_historyView);

									displayingHistory = true;

								} catch (NumberFormatException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}

						}
					}

				});
	}

	/**
	 * Set the default click listeners that are not in the
	 * 	main view of the card explorer
	 * 
	 * @param clickedCard	-> CardView that will appear in the history view
	 * 							or the child view of the card explorer
	 */
	public void defaulCardClickListener(CardView clickedCard) {

		// Listen to the cards text button
		clickedCard.getNativeButton_text().addClickListener(
				new NativeButton.ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {

						try {
							// get the latest version of the card data from the
							// database
							Card newCard = MmowgliDB.oneCardQuery(Integer
									.parseInt(clickedCard.getCardId()));

							// display the card in the card explorer
							setNewChosenCard(newCard);

						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

						// Focus current chosen card in main view
						currentChosenCard.removeTransparency();
						currentChosenCard.expandCardView();
					}

				});
	}

	/**
	 * Style the cards in the main view with the default values
	 */
	public void styleCardView(VerticalLayout view, CardView card) {
		// base Styling
		card.setImmediate(false);
		card.setWidth("340px");
		card.setHeight("-1px");

		// setExpansion ratio
		view.setExpandRatio(card, 1.0f);

		if (view.getId().equalsIgnoreCase("main")) {
			card.addTransparency();
			mainViewCardClickListener(card);
		} else if (view.getId().equalsIgnoreCase("child")) {
			defaulCardClickListener(card);
		} else {
			// historyViewClickLitener(card);
			defaulCardClickListener(card);
		}

	}


	public VerticalLayout getVerticalLayout_childView() {
		return verticalLayout_childView;
	}

	public void setVerticalLayout_childView(
			VerticalLayout verticalLayout_childView) {
		this.verticalLayout_childView = verticalLayout_childView;
	}

	public VerticalLayout getVerticalLayout_mainView() {
		return verticalLayout_mainView;
	}

	public void setVerticalLayout_mainView(
			VerticalLayout verticalLayout_mainView) {
		this.verticalLayout_mainView = verticalLayout_mainView;
	}

	public VerticalLayout getVerticalLayout_historyView() {
		return verticalLayout_historyView;
	}

	public void setVerticalLayout_historyView(
			VerticalLayout verticalLayout_historyView) {
		this.verticalLayout_historyView = verticalLayout_historyView;
	}

	public boolean isDisplayingHistory() {
		return displayingHistory;
	}

	public void setDisplayingHistory(boolean displayingHistory) {
		this.displayingHistory = displayingHistory;
	}

	public boolean isDisplayingSiblings() {
		return displayingSiblings;
	}

	public void setDisplayingSiblings(boolean displayingSiblings) {
		this.displayingSiblings = displayingSiblings;
	}

	public boolean isDisplayingChlidren() {
		return displayingChlidren;
	}

	public void setDisplayingChlidren(boolean displayingChlidren) {
		this.displayingChlidren = displayingChlidren;
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("37.5em");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("37.5em");

		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2);
		mainLayout.setComponentAlignment(verticalLayout_2, new Alignment(48));

		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		mainLayout.addComponent(verticalLayout_3);
		mainLayout.setComponentAlignment(verticalLayout_3, new Alignment(48));

		// verticalLayout_4
		verticalLayout_4 = buildVerticalLayout_4();
		mainLayout.addComponent(verticalLayout_4);
		mainLayout.setComponentAlignment(verticalLayout_4, new Alignment(48));

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("-1px");
		verticalLayout_2.setHeight("31.25em");
		verticalLayout_2.setMargin(false);

		// label_HistoryTitle
		label_HistoryTitle = new Label();
		label_HistoryTitle.setImmediate(false);
		label_HistoryTitle.setWidth("-1px");
		label_HistoryTitle.setHeight("-1px");
		label_HistoryTitle.setValue("History");
		verticalLayout_2.addComponent(label_HistoryTitle);
		verticalLayout_2.setComponentAlignment(label_HistoryTitle,
				new Alignment(24));

		// panel_history
		panel_history = buildPanel_history();
		verticalLayout_2.addComponent(panel_history);
		verticalLayout_2.setExpandRatio(panel_history, 1.0f);

		return verticalLayout_2;
	}

	@AutoGenerated
	private Panel buildPanel_history() {
		// common part: create layout
		panel_history = new Panel();
		panel_history.setImmediate(false);
		panel_history.setWidth("100.0%");
		panel_history.setHeight("100.0%");

		// verticalLayout_historyView
		verticalLayout_historyView = new VerticalLayout();
		verticalLayout_historyView.setImmediate(false);
		verticalLayout_historyView.setWidth("22.5em");
		verticalLayout_historyView.setHeight("-1px");
		verticalLayout_historyView.setMargin(false);
		verticalLayout_historyView.setSpacing(true);
		panel_history.setContent(verticalLayout_historyView);

		return panel_history;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("-1px");
		verticalLayout_3.setHeight("31.25em");
		verticalLayout_3.setMargin(false);

		// label_mainTitle
		label_mainTitle = new Label();
		label_mainTitle.setImmediate(false);
		label_mainTitle.setWidth("-1px");
		label_mainTitle.setHeight("-1px");
		label_mainTitle.setValue("Main");
		verticalLayout_3.addComponent(label_mainTitle);
		verticalLayout_3.setComponentAlignment(label_mainTitle, new Alignment(
				24));

		// panel_currentCards
		panel_currentCards = buildPanel_currentCards();
		verticalLayout_3.addComponent(panel_currentCards);
		verticalLayout_3.setExpandRatio(panel_currentCards, 1.0f);

		return verticalLayout_3;
	}

	@AutoGenerated
	private Panel buildPanel_currentCards() {
		// common part: create layout
		panel_currentCards = new Panel();
		panel_currentCards.setImmediate(false);
		panel_currentCards.setWidth("100.0%");
		panel_currentCards.setHeight("100.0%");

		// verticalLayout_mainView
		verticalLayout_mainView = new VerticalLayout();
		verticalLayout_mainView.setImmediate(false);
		verticalLayout_mainView.setWidth("22.5em");
		verticalLayout_mainView.setHeight("-1px");
		verticalLayout_mainView.setMargin(false);
		verticalLayout_mainView.setSpacing(true);
		panel_currentCards.setContent(verticalLayout_mainView);

		return panel_currentCards;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_4() {
		// common part: create layout
		verticalLayout_4 = new VerticalLayout();
		verticalLayout_4.setImmediate(false);
		verticalLayout_4.setWidth("-1px");
		verticalLayout_4.setHeight("31.25em");
		verticalLayout_4.setMargin(false);

		// label_childTitle
		label_childTitle = new Label();
		label_childTitle.setImmediate(false);
		label_childTitle.setWidth("-1px");
		label_childTitle.setHeight("-1px");
		label_childTitle.setValue("Children");
		verticalLayout_4.addComponent(label_childTitle);
		verticalLayout_4.setComponentAlignment(label_childTitle, new Alignment(
				24));

		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		verticalLayout_4.addComponent(horizontalLayout_1);
		verticalLayout_4.setExpandRatio(horizontalLayout_1, 0.08f);

		// panel_cardChildren
		panel_cardChildren = buildPanel_cardChildren();
		verticalLayout_4.addComponent(panel_cardChildren);
		verticalLayout_4.setExpandRatio(panel_cardChildren, 1.0f);

		return verticalLayout_4;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("23.438em");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);

		// textField_search
		textField_search = new TextField();
		textField_search.setImmediate(false);
		textField_search.setWidth("5.625em");
		textField_search.setHeight("1.563em");
		horizontalLayout_1.addComponent(textField_search);

		// nativeButton_search
		nativeButton_search = new NativeButton();
		nativeButton_search.setCaption("NativeButton");
		nativeButton_search.setImmediate(true);
		nativeButton_search.setWidth("-1px");
		nativeButton_search.setHeight("-1px");
		horizontalLayout_1.addComponent(nativeButton_search);

		// label_sort
		label_sort = new Label();
		label_sort.setImmediate(false);
		label_sort.setWidth("-1px");
		label_sort.setHeight("-1px");
		label_sort.setValue("Sort By:");
		horizontalLayout_1.addComponent(label_sort);
		horizontalLayout_1.setComponentAlignment(label_sort, new Alignment(48));

		// comboBox_1
		comboBox_1 = new ComboBox();
		comboBox_1.setImmediate(false);
		comboBox_1.setWidth("5.625em");
		comboBox_1.setHeight("1.563em");
		horizontalLayout_1.addComponent(comboBox_1);

		return horizontalLayout_1;
	}

	@AutoGenerated
	private Panel buildPanel_cardChildren() {
		// common part: create layout
		panel_cardChildren = new Panel();
		panel_cardChildren.setImmediate(false);
		panel_cardChildren.setWidth("100.0%");
		panel_cardChildren.setHeight("100.0%");

		// verticalLayout_childView
		verticalLayout_childView = new VerticalLayout();
		verticalLayout_childView.setImmediate(false);
		verticalLayout_childView.setWidth("22.5em");
		verticalLayout_childView.setHeight("-1px");
		verticalLayout_childView.setMargin(false);
		verticalLayout_childView.setSpacing(true);
		panel_cardChildren.setContent(verticalLayout_childView);

		return panel_cardChildren;
	}

}
