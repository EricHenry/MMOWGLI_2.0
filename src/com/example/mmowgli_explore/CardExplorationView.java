package com.example.mmowgli_explore;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import com.example.mmowgli_managers.CardList;
import com.example.mmowgli_managers.Card;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class CardExplorationView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	@AutoGenerated
	private HorizontalLayout mainLayout;


	@AutoGenerated
	private VerticalLayout verticalLayout_4;


	@AutoGenerated
	private Panel panel_cardChildren;


	@AutoGenerated
	private VerticalLayout verticalLayout_3;


	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;


	@AutoGenerated
	private ComboBox comboBox_1;


	@AutoGenerated
	private Label label_sort;


	@AutoGenerated
	private NativeButton nativeButton_search;


	@AutoGenerated
	private TextField textField_search;


	@AutoGenerated
	private Panel panel_currentCards;


	@AutoGenerated
	private VerticalLayout verticalLayout_2;


	@AutoGenerated
	private Panel panel_tree;


	@AutoGenerated
	private VerticalLayout verticalLayout_1;


	//Attributes
	private String chosenCardId;
	private CardView currentChosenCard = null;						//Keep track of the card view that has been clicked.
	private CardView[] currentlyDisplayedCards;						//Current List of cards listed in the middle panel
	private CardView[] currentlyDisplayedChildren;					//Current List of child cards being displyed
	private CardView[] currentCardHistory;							//Current History List being displayed
	
	//TODO change to updated version
	private CardView[] cardsToAdd	= new CardView[10];
	private CardView[] children		= new CardView[10];
	private CardView[] history		= new CardView[8];
	
	private CardList cardsToMainView;
	private CardList cardsToChildView;
	private CardList cardsToHistoryView;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CardExplorationView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		//Instantiate Card Lists
		cardsToMainView = new CardList();
		cardsToChildView = new CardList();
		cardsToHistoryView = new CardList();
		
		//create random cards
		createRandomCards();
		
		//set different background colors for cards
		initCards();
		
		currentChosenCard= new CardView((CardView)verticalLayout_2.getComponent(4));
		currentChosenCard.expandCardView();
		currentChosenCard.removeTransparency();
		//initChildCards();
		//initHistoryCards();

		//search button
		nativeButton_search.setCaption(null);
		nativeButton_search.setIcon(new ThemeResource("images/icons/sidebar/spyglass25.png"));
		nativeButton_search.setStyleName("cardTextMini");
			
	}
	
	/*
	 * Needs to be removed - just for testing purposes
	 */
	public void createRandomCards(){
		Card random[] = new Card[30];
		
		//150 Characters
		String text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit Cras sodales eros ut ipsum ultricies eleifend. Vivamus justo ipsum, rutrum vel orciv vel orciv";
		
		for(int i = 0; i < 30; i++){
			random[i] = new Card (i, (i + 100), text, "Expand", 5, 60, new Timestamp(2015, 5, 25, 12, 0, 0, 0)); 
			
			System.out.print(i+100);
			
			if(i < 10)
				cardsToMainView.addCard(random[i]);
			else if(i >= 10 && i < 25){
				cardsToChildView.addCard(random[i]);
				random[i].parent = 105;
			}else
				cardsToHistoryView.addCard(random[i]);
			
		}
	}
	
	/**
	 * Initialize Cards that need to be added to the Main View of the Card Explorer
	 * 	Should only be used after a query is made to get the corresponding CardList 
	 * 	from the database.
	 */
	private void initCards(){
		
		System.out.println(cardsToMainView.size());
		
		while(cardsToMainView.size() > 0){
			
			System.out.println(cardsToMainView.size());
			//get the current first node of the card list
			Card currentCardData = cardsToMainView.getCard();
			
			//get the current card data
			String id = Integer.toString(currentCardData.cardId);
			String pId = Integer.toString(currentCardData.playerId);
			String cardText = currentCardData.textUser;
			String cardType = currentCardData.cardType;
			String parent = Integer.toString(currentCardData.parent);
			String votes = Integer.toString(currentCardData.votes);
			String date = new SimpleDateFormat("MM/dd/yyyy").format(currentCardData.time.getDate());
			
			//create a new card view using the card data.
			CardView newCard = new CardView(id, pId, cardText, cardType, parent, votes, date);
			newCard.setCardType(cardType);
			
			//add card to the component
			verticalLayout_2.addComponent(newCard);			
		} 
		
		styleCardsInMainView();
	}
	
	public void initChildCards(){
		for(int i = 0; i < children.length; i++){
			String id = Integer.toBinaryString(i+50);
			children[i] = new CardView(id);
			
			//basic card styling
			//cardView_3 = new CardView();
			children[i].setImmediate(false);
			children[i].setWidth("340px");
			children[i].setHeight("-1px");
			verticalLayout_3.addComponent(children[i]);
			verticalLayout_3.setExpandRatio(children[i], 1.0f);			
			mainViewClickListener(children[i]);
		
			//set the card as inside the main view of the card explorer
			//children[i].setInChildView(true);
		}
		
		//set different background colors for cards
//		children[0].setCardType("Counter");
//		children[1].setCardType("Explore");
//		children[2].setCardType("Adapt");
//		children[3].setCardType("Adapt");
//		children[4].setCardType("Counter");
//		children[5].setCardType("Adapt");
//		children[6].setCardType("Expand");
//		children[7].setCardType("Expand");
//		children[8].setCardType("Explore");
//		children[9].setCardType("Adapt");
	}
	
	public void initHistoryCards(){
		for(int i = 0; i < history.length; i++){
			String id = Integer.toBinaryString(i+33);
			history[i] = new CardView(id);
			
			//basic card styling
			//cardView_3 = new CardView();
			history[i].setImmediate(false);
			history[i].setWidth("340px");
			history[i].setHeight("-1px");
			verticalLayout_1.addComponent(history[i]);
			verticalLayout_1.setExpandRatio(history[i], 1.0f);			
			mainViewClickListener(history[i]);
		
			//set the card as inside the main view of the card explorer
			//children[i].setInChildView(true);
		}
		
		//set different background colors for cards
		history[0].setCardType("Adapt");
		history[1].setCardType("Explore");
		history[2].setCardType("Adapt");
		history[3].setCardType("Explore");
		history[4].setCardType("Counter");
		history[5].setCardType("Adapt");
		history[6].setCardType("Expand");
		history[7].setCardType("Counter");
		
	}
	
	/**
	 * 
	 * @param clickedCard
	 */
	public void mainViewClickListener(CardView clickedCard){
		
		//Listen to the cards text button
		clickedCard.getNativeButton_text().addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
				//check if the clicked card is the current chosen card
				//if it is not, then minimize the current card and maximize the new chosen card
				if(!clickedCard.equals(currentChosenCard)){

					//Make sure the current card is not null
					try{
						currentChosenCard.addTransparency();
						currentChosenCard.shrinkCardView();
						
						clickedCard.expandCardView();
						clickedCard.removeTransparency();
						
					}catch(NullPointerException e){
						clickedCard.expandCardView();
						clickedCard.removeTransparency();
					}
					
					//Set the clicked card as the new current card
					currentChosenCard = new CardView(clickedCard);
				}
			}
			
		});		
	}
	
	/**
	 * 
	 * @param clickedCard -> The card that was clicked by the user
	 */
	public void childViewClickListener(CardView clickedCard){
		
		//Listen to the cards text button
		clickedCard.getNativeButton_text().addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
				try{
					//move the current chosen card and add it to the history view
					verticalLayout_1.addComponent(new CardView(currentChosenCard));
					
					//remove the current list of card in the main view
					verticalLayout_2.removeAllComponents();
					
					//move the current child view list move it to the main view
					int numberOfChildren = verticalLayout_3.getComponentCount();
					for(int index = 0; index < numberOfChildren; index++)
						verticalLayout_2.addComponent(verticalLayout_3.getComponent(index));

					//remove the current child components
					verticalLayout_3.removeAllComponents();
					
					//TODO add the children Cards to the ChildView
					
					//style the cards added to 
				}catch(NullPointerException e){
					//TODO ADD ERROR HANDLING
				}
				
				//set the clicked card as the new chosencard
				currentChosenCard = new CardView(clickedCard);
				currentChosenCard.expandCardView();
			}
			
		});		
	}
	
	/**
	 * Style the cards in the main view with the default values
	 */
	private void styleCardsInMainView(){
		int cardsInMainView = verticalLayout_2.getComponentCount();
		
		for(int index = 0; index < cardsInMainView; index++){
			((CardView)verticalLayout_2.getComponent(index)).setImmediate(false);
			((CardView)verticalLayout_2.getComponent(index)).setWidth("340px");
			((CardView)verticalLayout_2.getComponent(index)).setHeight("-1px");
			
			//set expantionRatio of this card
			verticalLayout_2.setExpandRatio(((CardView)verticalLayout_2.getComponent(index)), 1.0f);
			
			//make cards transparent by default
			((CardView)verticalLayout_2.getComponent(index)).addTransparency();
			
			//attach the appropriate listener
			mainViewClickListener(((CardView)verticalLayout_2.getComponent(index)));
		}
	}
	
	/**
	 * 
	 * @param clickedCard
	 */
	public void historyViewClickListener(CardView clickedCard){
		
		//Listen to the cards text button
		clickedCard.getNativeButton_text().addClickListener(new NativeButton.ClickListener(){
					
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
						
				//check if the clicked card is the current chosen card
				//if it is not, then minimize the current card and maximize the new chosen card
				if(!clickedCard.equals(currentChosenCard)){
					//Make sure the current card is not null
					try{
						currentChosenCard.addTransparency();
						currentChosenCard.shrinkCardView();
								
						clickedCard.expandCardView();
						clickedCard.removeTransparency();
								
					}catch(NullPointerException e){
						clickedCard.expandCardView();
						clickedCard.removeTransparency();
					}
							
					//Set the clicked card as the new current card
					currentChosenCard = new CardView(clickedCard);
				}
			}
					
		});	
	}
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("500px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("500px");
		
		// panel_tree
		panel_tree = buildPanel_tree();
		mainLayout.addComponent(panel_tree);
		mainLayout.setExpandRatio(panel_tree, 1.2f);
		
		// panel_currentCards
		panel_currentCards = buildPanel_currentCards();
		mainLayout.addComponent(panel_currentCards);
		mainLayout.setExpandRatio(panel_currentCards, 3.0f);
		
		// verticalLayout_4
		verticalLayout_4 = buildVerticalLayout_4();
		mainLayout.addComponent(verticalLayout_4);
		mainLayout.setExpandRatio(verticalLayout_4, 2.5f);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_tree() {
		// common part: create layout
		panel_tree = new Panel();
		panel_tree.setImmediate(false);
		panel_tree.setWidth("100.0%");
		panel_tree.setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("300px");
		verticalLayout_1.setHeight("-1px");
		verticalLayout_1.setMargin(false);
		verticalLayout_1.setSpacing(true);
		panel_tree.setContent(verticalLayout_1);
		
		return panel_tree;
	}

	@AutoGenerated
	private Panel buildPanel_currentCards() {
		// common part: create layout
		panel_currentCards = new Panel();
		panel_currentCards.setImmediate(false);
		panel_currentCards.setWidth("100.0%");
		panel_currentCards.setHeight("100.0%");
		
		// verticalLayout_2
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("375px");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(false);
		verticalLayout_2.setSpacing(true);
		panel_currentCards.setContent(verticalLayout_2);
		
		return panel_currentCards;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_4() {
		// common part: create layout
		verticalLayout_4 = new VerticalLayout();
		verticalLayout_4.setImmediate(false);
		verticalLayout_4.setWidth("100.0%");
		verticalLayout_4.setHeight("100.0%");
		verticalLayout_4.setMargin(false);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		verticalLayout_4.addComponent(horizontalLayout_1);
		verticalLayout_4.setExpandRatio(horizontalLayout_1, 0.2f);
		
		// panel_cardChildren
		panel_cardChildren = buildPanel_cardChildren();
		verticalLayout_4.addComponent(panel_cardChildren);
		verticalLayout_4.setExpandRatio(panel_cardChildren, 2.0f);
		
		return verticalLayout_4;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("375px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// textField_search
		textField_search = new TextField();
		textField_search.setImmediate(false);
		textField_search.setWidth("90px");
		textField_search.setHeight("25px");
		horizontalLayout_1.addComponent(textField_search);
		
		// nativeButton_search
		nativeButton_search = new NativeButton();
		nativeButton_search.setCaption("NativeButton");
		nativeButton_search.setImmediate(true);
		nativeButton_search.setWidth("-1px");
		nativeButton_search.setHeight("-1px");
		horizontalLayout_1.addComponent(nativeButton_search);
		
		// label_sort
		label_sort = new Label();
		label_sort.setImmediate(false);
		label_sort.setWidth("-1px");
		label_sort.setHeight("-1px");
		label_sort.setValue("Sort By:");
		horizontalLayout_1.addComponent(label_sort);
		horizontalLayout_1.setComponentAlignment(label_sort, new Alignment(48));
		
		// comboBox_1
		comboBox_1 = new ComboBox();
		comboBox_1.setImmediate(false);
		comboBox_1.setWidth("90px");
		comboBox_1.setHeight("25px");
		horizontalLayout_1.addComponent(comboBox_1);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private Panel buildPanel_cardChildren() {
		// common part: create layout
		panel_cardChildren = new Panel();
		panel_cardChildren.setImmediate(false);
		panel_cardChildren.setWidth("100.0%");
		panel_cardChildren.setHeight("100.0%");
		
		// verticalLayout_3
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("375px");
		verticalLayout_3.setHeight("-1px");
		verticalLayout_3.setMargin(false);
		verticalLayout_3.setSpacing(true);
		panel_cardChildren.setContent(verticalLayout_3);
		
		return panel_cardChildren;
	}

}
