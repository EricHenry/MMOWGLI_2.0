/**
 * @Author: Eric H Correia
 *
 * This class creates 
 * 
 */

package com.example.mmowgli_2_0;

import java.sql.SQLException;
import java.text.SimpleDateFormat;

import com.example.mmowgli_backend.Card;
import com.example.mmowgli_backend.CardList;
import com.example.mmowgli_backend.MmowgliDB;
import com.example.mmowgli_backend.TagList;
import com.example.mmowgli_explore.CardExplorationView;
import com.example.mmowgli_explore.CardView;
import com.example.mmowgli_updates.BaseCardView;
import com.example.mmowgli_updates.HomePageUpdates;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Link;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;

public class HomePage extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Panel panel_2;
	@AutoGenerated
	private GridLayout gridLayout_content;
	@AutoGenerated
	private Footer footer;
	@AutoGenerated
	private CardExplorationView cardExplorationView;
	@AutoGenerated
	private HomePageUpdates homePageUpdates;
	@AutoGenerated
	private VideoDisplayer videoDisplayer;
	@AutoGenerated
	private SideBar sideBar;
	@AutoGenerated
	private TopBar topBar;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public HomePage() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		//styling
		topBar.setStyleName("topbar");
		sideBar.setStyleName("sidebar");
		panel_2.setStyleName("borderless");
		
	//initiate the update lists
		//top row
		initTrendingCardsList();
		initTrendingTags();
		initRecentCardsList();
		
		//bottom row
		initPopularTags();
		initPopularCardsList();
	}
	
	
	/**
	 * This method gets the top 5 trending cards from the database and displays 
	 * 		them on the screen. 
	 */
	private void initTrendingCardsList(){
		
		try {
			//get the list from the database
			CardList topcards = MmowgliDB.trendingCardsQuery(500);
			
			//cycle through the list and add display it
			while(topcards.size() > 0){
				
				//get the first card in the in the list
				Card currentCardData = topcards.getCard();
				
				//create a new card view using the card data.
				BaseCardView newCard = MmowgliDB.createBaseCardView(currentCardData);
				
				//add click listener
				setUpdaterButtonListener(newCard);
				
				//add card to the view
				homePageUpdates.getTrendingCards().getMainLayout().addComponent(newCard);
				homePageUpdates.getTrendingCards().getMainLayout().setComponentAlignment(newCard, Alignment.MIDDLE_CENTER);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	
	/**
	 * This method gets the top 15 most trending tags 
	 * from the database and displays them on the screen. 
	 */
	private void initTrendingTags(){
		
		try {
			
			int index = 1;
			int row = 0;			//the current row of the gridlayout to store a link
			int column = 0;			//the current column of the gridlayout to store a link
			
			//get the list from the database
			TagList topTags = MmowgliDB.trendingTagsQuery(500);
			
			//cycle through the list and add display it
			while(topTags.size() > 0){
				
				//get the first tag in the in the list
				String currentTag = topTags.getTag();
				
				//create a tag
				NativeButton tag = new NativeButton();
				tag.setId(currentTag);
				tag.setCaption(index + ".) " + currentTag);
				setUpdaterTagListener(tag);
				
				//insert the tag into the display
				homePageUpdates.getTrendingTags().getLink_container().addComponent(tag, column, row);
				
				//update the column, row and index info
				column = index % 3;
				if(index % 3 == 0){
					row = row + 1;
				}
				index++;
				
				//Style the link
				homePageUpdates.getTrendingTags().getLink_container().setComponentAlignment(tag, Alignment.MIDDLE_CENTER);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	/**
	 * This method gets the top 5 most recently played cards 
	 * from the database and displays them on the screen. 
	 */
	private void initRecentCardsList(){
		
		try {
			//get the list from the database
			CardList topcards = MmowgliDB.recentCardsQuery();
			
			//cycle through the list and add display it
			while(topcards.size() > 0){
				
				//get the first card in the in the list
				Card currentCardData = topcards.getCard();
				
				//create a new card view using the card data.
				BaseCardView newCard = MmowgliDB.createBaseCardView(currentCardData);
				
				//add click listener
				setUpdaterButtonListener(newCard);
				
				//add card to the view
				homePageUpdates.getRecentlyPlayed().getMainLayout().addComponent(newCard);
				homePageUpdates.getRecentlyPlayed().getMainLayout().setComponentAlignment(newCard, Alignment.MIDDLE_CENTER);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	/**
	 * This method gets the top 5 cards from the database and displays 
	 * 		them on the screen. 
	 */
	private void initPopularCardsList(){
		
		try {
			//get the list from the database
			CardList topcards = MmowgliDB.topCardsQuery();
			
			//cycle through the list and add display it
			while(topcards.size() > 0){
				
				//get the first card in the in the list
				Card currentCardData = topcards.getCard();
				
				//create a new card view using the card data.
				BaseCardView newCard = MmowgliDB.createBaseCardView(currentCardData);
				
				//add click listener
				setUpdaterButtonListener(newCard);
				
				//add card to the view
				homePageUpdates.getPopularCards().getMainLayout().addComponent(newCard);
				homePageUpdates.getPopularCards().getMainLayout().setComponentAlignment(newCard, Alignment.MIDDLE_CENTER);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	/**
	 * This method gets the top 15 most popular tags 
	 * from the database and displays them on the screen. 
	 */
	public void initPopularTags(){
		
		try {
			
			int index = 1;
			int row = 0;			//the current row of the gridlayout to store a link
			int column = 0;			//the current column of the gridlayout to store a link
			
			//get the list from the database
			TagList topTags = MmowgliDB.topTagsQuery();
			
			//cycle through the list and add display it
			while(topTags.size() > 0){
				
				//get the first tag in the in the list
				String currentTag = topTags.getTag();
				
				//create a tag
				NativeButton tag = new NativeButton();
				tag.setId(currentTag);
				tag.setCaption(index + ".) " + currentTag);
				setUpdaterTagListener(tag);
				
				//insert the tag into the display
				homePageUpdates.getPopularTags().getLink_container().addComponent(tag, column, row);
				
				//update the row and column info
				column = index % 3;
				if(index % 3 == 0){
					row = row + 1;
				}
				index++;
				
				//Style the link
				homePageUpdates.getPopularTags().getLink_container().setComponentAlignment(tag, Alignment.MIDDLE_CENTER);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	/**
	 * 
	 * @param baseCard
	 */
	public void setUpdaterButtonListener(BaseCardView baseCard){
		
		baseCard.getNativeButton_text().addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event){
				//TODO add a popup window to add a card.
				
				//get card data from database
				try {
					Card data = MmowgliDB.oneCardQuery(Integer.parseInt(baseCard.getCardId()));
					
					cardExplorationView.setNewChosenCard(data);
					
				} catch (NumberFormatException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});
	}
	
	/**
	 * 
	 * @param tag
	 */
	public void setUpdaterTagListener(NativeButton tag){
		
		tag.addClickListener(new NativeButton.ClickListener(){
			
			@Override
			public void buttonClick(ClickEvent event){
				//TODO add a popup window to add a card.
				
				//get card data list from database
				try {
					CardList data = MmowgliDB.taggedCardsQuery(tag.getId());
					
					//clear the card explorer
					cardExplorationView.clearExplorationView();
					
					//display the tagged cards
					cardExplorationView.displayCardList(data, cardExplorationView.getVerticalLayout_mainView());
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});
	}
	
	
//	/**
//	 * *********************** HELPER METHODS ADDED BY ERIC ***********************
//	 */
//	
//	/**
//	 * This method translates a Card object to a CardView Object
//	 * @param cardData	-> Card from database
//	 * @return			-> CardView with card Information
//	 */
//	public static CardView createCardView(Card cardData){
//		
//		//get the current card data
//		String id = Integer.toString(cardData.cardId);
//		String pId = Integer.toString(cardData.playerId);
//		String cardText = cardData.textUser;
//		String cardType = cardData.cardType;
//		String parent = Integer.toString(cardData.parent);
//		String votes = Integer.toString(cardData.votes);
//		String date = new SimpleDateFormat("MM/dd/yyyy").format(cardData.time.getDate());
//		
//		return new CardView(id, pId, cardText, cardType, parent, votes, date);
//		
//	}
//	
//	/**
//	 * This method translates a Card object to a BaseCardView Object
//	 * @param cardData	-> Card from database
//	 * @return			-> BaseCardView with card Information
//	 */
//	public static BaseCardView createBaseCardView(Card cardData){
//		
//		//get the current card data
//		String id = Integer.toString(cardData.cardId);
//		String pId = Integer.toString(cardData.playerId);
//		String cardText = cardData.textUser;
//		String cardType = cardData.cardType;
//		String date = new SimpleDateFormat("MM/dd/yyyy").format(cardData.time.getDate());
//		
//		//create a new card view using the card data.
//		return new BaseCardView(id, pId, cardText, cardType, date);
//
//	}
	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// topBar
		topBar = new TopBar();
		topBar.setImmediate(false);
		topBar.setWidth("100.0%");
		topBar.setHeight("100.0%");
		mainLayout.addComponent(topBar);
		mainLayout.setExpandRatio(topBar, 0.07f);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		mainLayout.addComponent(horizontalLayout_2);
		mainLayout.setExpandRatio(horizontalLayout_2, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("100.0%");
		horizontalLayout_2.setHeight("100.0%");
		horizontalLayout_2.setMargin(false);
		
		// sideBar
		sideBar = new SideBar();
		sideBar.setImmediate(false);
		sideBar.setWidth("10.0em");
		sideBar.setHeight("100.0%");
		horizontalLayout_2.addComponent(sideBar);
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		horizontalLayout_2.addComponent(verticalLayout_2);
		horizontalLayout_2.setExpandRatio(verticalLayout_2, 1.0f);
		horizontalLayout_2.setComponentAlignment(verticalLayout_2,
				new Alignment(20));
		
		return horizontalLayout_2;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		
		// videoDisplayer
		videoDisplayer = new VideoDisplayer();
		videoDisplayer.setImmediate(false);
		videoDisplayer.setWidth("100.0%");
		videoDisplayer.setHeight("-1px");
		verticalLayout_2.addComponent(videoDisplayer);
		
		// panel_2
		panel_2 = buildPanel_2();
		verticalLayout_2.addComponent(panel_2);
		verticalLayout_2.setExpandRatio(panel_2, 1.0f);
		verticalLayout_2.setComponentAlignment(panel_2, new Alignment(48));
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private Panel buildPanel_2() {
		// common part: create layout
		panel_2 = new Panel();
		panel_2.setImmediate(false);
		panel_2.setWidth("100.0%");
		panel_2.setHeight("100.0%");
		
		// gridLayout_content
		gridLayout_content = buildGridLayout_content();
		panel_2.setContent(gridLayout_content);
		
		return panel_2;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_content() {
		// common part: create layout
		gridLayout_content = new GridLayout();
		gridLayout_content.setImmediate(false);
		gridLayout_content.setWidth("70.0em");
		gridLayout_content.setHeight("93.75em");
		gridLayout_content.setMargin(false);
		gridLayout_content.setSpacing(true);
		gridLayout_content.setRows(3);
		
		// homePageUpdates
		homePageUpdates = new HomePageUpdates();
		homePageUpdates.setImmediate(false);
		homePageUpdates.setWidth("100.0%");
		homePageUpdates.setHeight("-1px");
		gridLayout_content.addComponent(homePageUpdates, 0, 0);
		gridLayout_content.setComponentAlignment(homePageUpdates,
				new Alignment(48));
		
		// cardExplorationView
		cardExplorationView = new CardExplorationView();
		cardExplorationView.setImmediate(false);
		cardExplorationView.setWidth("100.0%");
		cardExplorationView.setHeight("-1px");
		gridLayout_content.addComponent(cardExplorationView, 0, 1);
		gridLayout_content.setComponentAlignment(cardExplorationView,
				new Alignment(24));
		
		// footer
		footer = new Footer();
		footer.setImmediate(false);
		footer.setWidth("100.0%");
		footer.setHeight("-1px");
		gridLayout_content.addComponent(footer, 0, 2);
		gridLayout_content.setComponentAlignment(footer, new Alignment(24));
		
		return gridLayout_content;
	}

}
