package com.example.mmowgli_2_0;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractTextField.TextChangeEventMode;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;

public class CardExplorationComponent extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private MenuBar orderByBar;
	@AutoGenerated
	private TextField searchField;
	@AutoGenerated
	private Table leafTable;
	@AutoGenerated
	private Table cardTable;
	@AutoGenerated
	private Tree cardTree;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CardExplorationComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		/* Add example data to the card tree. */
		cardTree.addItem("Root");
		cardTree.addItem("Expand 1");
		cardTree.addItem("Expand 2");
		cardTree.addItem("Expand");
		cardTree.addItem("Explore");
		cardTree.addItem("Counter");
		cardTree.addItem("Adapt");
		cardTree.setParent("Expand 1","Root");
		cardTree.setParent("Expand 2", "Root");
		cardTree.setParent("Expand","Expand 1");
		cardTree.setParent("Explore","Expand 1");
		cardTree.setParent("Counter","Expand 1");
		cardTree.setParent("Adapt","Expand 1");
		cardTree.setChildrenAllowed("Expand", false);
		cardTree.setChildrenAllowed("Explore", false);
		cardTree.setChildrenAllowed("Counter", false);
		cardTree.setChildrenAllowed("Adapt", false);
		/* End example data. */
		cardTree.expandItemsRecursively("Root");
		
		/* Set up the main/center card table. */
		/*************************************************/
		/* Change CardComponent in the following line    */
		/* to the name of your Card class for the table. */
		/*************************************************/
		//cardTable.addContainerProperty("Selected Card", CardComponent.class, null);
		cardTable.setColumnHeaderMode(Table.COLUMN_HEADER_MODE_HIDDEN);
		
		/* Add some example cards - real data to be added here. */
		/*************************************************/
		/* Change CardComponent in the following 2 lines */
		/* to the name of your Card class for the table. */
		/*************************************************/
		//cardTable.addItem(new Object[]{new CardComponent()}, 0);
		//cardTable.addItem(new Object[]{new CardComponent()}, 1);
		/* End example data. */
		
		/* Set up the table containing the leaf cards. */
		/*************************************************/
		/* Change CardComponent in the following line    */
		/* to the name of your Card class for the table. */
		/*************************************************/
		//leafTable.addContainerProperty("Leaf Cards", CardComponent.class, null);
		leafTable.setColumnHeaderMode(Table.COLUMN_HEADER_MODE_HIDDEN);
		
		/* Add some example cards - real data to be added here. */
		/*************************************************/
		/* Change CardComponent in the following line    */
		/* to the name of your Card class for the table. */
		/*************************************************/
		//for (int i=0; i<10; i++)
		//	leafTable.addItem(new Object[]{new CardComponent()}, i);
		/* End example data. */
		
		/* Search field setup.*/
		initSearch(); // separate function since it adds a listener
		
		/* Menu bar setup. */
		MenuItem order = orderByBar.addItem("Order by", null, null);
		order.addItem("Rating", null);
		order.addItem("Date", null);
		
	}
	
	/* Initializes and adds listener to search field. */
	private void initSearch() {
		searchField.setInputPrompt("Search");
		
		searchField.setTextChangeEventMode(TextChangeEventMode.LAZY);
		
		searchField.addTextChangeListener(new TextChangeListener() {
			public void textChange(final TextChangeEvent event) {
				/* Logic for sorting cards here -
				 * requesting data from manager
				 */
			}
		});
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("860px");
		mainLayout.setHeight("600px");
		
		// top-level component properties
		setWidth("860px");
		setHeight("600px");
		
		// cardTree
		cardTree = new Tree();
		cardTree.setImmediate(false);
		cardTree.setWidth("130px");
		cardTree.setHeight("310px");
		mainLayout.addComponent(cardTree, "top:20.0px;left:20.0px;");
		
		// cardTable
		cardTable = new Table();
		cardTable.setImmediate(false);
		cardTable.setWidth("350px");
		cardTable.setHeight("400px");
		mainLayout.addComponent(cardTable, "left:150.0px;");
		
		// leafTable
		leafTable = new Table();
		leafTable.setImmediate(false);
		leafTable.setWidth("350px");
		leafTable.setHeight("360px");
		mainLayout.addComponent(leafTable, "top:40.0px;left:508.0px;");
		
		// searchField
		searchField = new TextField();
		searchField.setImmediate(false);
		searchField.setWidth("234px");
		searchField.setHeight("-1px");
		mainLayout.addComponent(searchField, "top:0.0px;left:508.0px;");
		
		// orderByBar
		orderByBar = new MenuBar();
		orderByBar.setImmediate(false);
		orderByBar.setWidth("-1px");
		orderByBar.setHeight("-1px");
		mainLayout.addComponent(orderByBar, "top:0.0px;left:746.0px;");
		
		return mainLayout;
	}

}
